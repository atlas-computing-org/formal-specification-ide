[
    {
      "start": 0,
      "stop": 29,
      "category": "Navigation",
      "description": "Section header introducing the algorithm specifications",
      "text": "# 5. Algorithm Specifications"
    },
    {
      "start": 31,
      "stop": 161,
      "category": "Definition",
      "description": "Introduction of the general functions CIPHER() and INVCIPHER() for AES algorithms",
      "text": "The general function for executing AES-128, AES-192, or AES-256 is denoted by CIPHER(); its inverse is denoted by INVCIPHER().[^1]"
    },
    {
      "start": 163,
      "stop": 361,
      "category": "Elaboration",
      "description": "Footnote explaining why neutral terminology (CIPHER/INVCIPHER) is used instead of encryption/decryption",
      "text": "[^1]: Informally, these functions are sometimes called \"encryption\" and \"decryption,\" but neutral terminology is appropriate because there are other applications of block ciphers besides encryption."
    },
    {
      "start": 363,
      "stop": 651,
      "category": "Definition",
      "description": "Explanation of rounds and round keys as core components of the CIPHER and INVCIPHER algorithms",
      "text": "The core of the algorithms for CIPHER() and INVCIPHER() is a sequence of fixed transformations of the state called a *round*. Each round requires an additional input called the *round key*; the round key is a block that is usually represented as a sequence of four words (i.e., 16 bytes)."
    },
    {
      "start": 653,
      "stop": 964,
      "category": "Definition",
      "description": "Definition of the KEYEXPANSION() function that generates round keys from the cipher key",
      "text": "An expansion routine, denoted by KEYEXPANSION(), takes the block cipher key as input and generates the round keys as output. In particular, the input to KEYEXPANSION() is represented as an array of words, denoted by *key*, and the output is an expanded array of words, denoted by $w$, called the *key schedule*."
    },
    {
      "start": 966,
      "stop": 1560,
      "category": "Definition",
      "description": "Explanation of the differences between AES-128, AES-192, and AES-256 in terms of key length, number of rounds, and key expansion",
      "text": "The block ciphers AES-128, AES-192, and AES-256 differ in three respects: 1) the length of the key; 2) the number of rounds, which determines the size of the required key schedule; and 3) the specification of the recursion within KEYEXPANSION(). For each algorithm, the number of rounds is denoted by $Nr$, and the number of words of the key is denoted by $Nk$. (The number of words in the state is denoted by $Nb$ for Rijndael in general; in this Standard, $Nb=4$.) The specific values of $Nk$, $Nb$, and $Nr$ are given in Table 3. No other configurations of Rijndael conform to this Standard."
    },
    {
      "start": 1562,
      "stop": 1666,
      "category": "Navigation",
      "description": "Reference to another section for implementation issues related to key length, block size, and rounds",
      "text": "For implementation issues relating to the key length, block size, and number of rounds, see Section 6.3."
    },
    {
      "start": 1668,
      "stop": 1935,
      "category": "Parameter",
      "description": "Table showing the key-block-round combinations for the three AES variants",
      "text": "**Table 3. Key-Block-Round Combinations**\n| | Key length $Nk$ (in bits) | | Block size (in bits) | Number of rounds Nr |\n|---------|-----|-----|-----|-----|\n| AES-128 | 4 | 128 | 4 | 128 | 10 |\n| AES-192 | 6 | 192 | 4 | 128 | 12 |\n| AES-256 | 8 | 256 | 4 | 128 | 14 |"
    },
    {
      "start": 1937,
      "stop": 2525,
      "category": "Definition",
      "description": "Mathematical definition of the three AES variants in terms of the CIPHER() function",
      "text": "The three inputs to CIPHER() are: 1) the data input in, which is a block represented as a linear array of 16 bytes; 2) the number of rounds Nr for the instance; and 3) the round keys. Thus,\n$$\n\\begin{aligned}\n& \\operatorname{AES}-128(\\text{in}, \\text{key})=\\operatorname{CIPHER}(in, 10, \\operatorname{KEYEXPANSION}(\\text{key})) \\\\\n& \\operatorname{AES}-192(\\text{in}, \\text{key})=\\operatorname{CIPHER}(in, 12, \\operatorname{KEYEXPANSION}(\\text{key})) \\\\\n& \\operatorname{AES}-256(\\text{in}, \\text{key})=\\operatorname{CIPHER}(in, 14, \\operatorname{KEYEXPANSION}(\\text{key}))\n\\end{aligned}\n$$"
    },
    {
      "start": 2527,
      "stop": 2614,
      "category": "Definition",
      "description": "Definition of inverse permutations by replacing CIPHER() with INVCIPHER()",
      "text": "The inverse permutations are defined by replacing CIPHER() with INVCIPHER() in Eq. 5.1."
    },
    {
      "start": 2616,
      "stop": 2734,
      "category": "Navigation",
      "description": "Navigation reference to sections containing specifications of CIPHER(), KEYEXPANSION(), and INVCIPHER()",
      "text": "The specifications of CIPHER(), KEYEXPANSION(), and INVCIPHER() are given in Sections 5.1, 5.2, and 5.3, respectively."
    },
    {
      "start": 2736,
      "stop": 2751,
      "category": "Navigation",
      "description": "Section header for CIPHER() function",
      "text": "## 5.1 CIPHER()"
    },
    {
      "start": 2753,
      "stop": 3128,
      "category": "Definition",
      "description": "Overview of the four transformations that compose the rounds in CIPHER(): SubBytes(), ShiftRows(), MixColumns(), and ADDROUNDKEY()",
      "text": "The rounds in the specification of CIPHER() are composed of the following four byte-oriented transformations on the state:\n* SubBytes() applies a substitution table (S-box) to each byte.\n* ShiftRows() shifts rows of the state array by different offsets.\n* MixColumns() mixes the data within each column of the state array.\n* ADDROUNDKEY() combines a round key with the state."
    },
    {
      "start": 3130,
      "stop": 3414,
      "category": "Elaboration",
      "description": "Explanation of notation used in transformation specifications and reference to sections containing detailed specifications",
      "text": "The four transformations are specified in Sections 5.1.1-5.1.4. In those specifications, the transformed bit, byte, or block is denoted by appending the symbol ' as a superscript on the original variable (i.e., by $b_{i}^{\\prime}$, $b^{\\prime}$, $s_{i, j}^{\\prime}$, or $s^{\\prime}$)."
    },
    {
      "start": 3416,
      "stop": 3600,
      "category": "Elaboration",
      "description": "Explanation of how round keys for ADDROUNDKEY() are generated by KEYEXPANSION()",
      "text": "The round keys for ADDROUNDKEY() are generated by KEYEXPANSION(), which is specified in Section 5.2. In particular, the key schedule is represented as an array $w$ of $4*(Nr+1)$ words."
    },
    {
      "start": 3602,
      "stop": 3652,
      "category": "Navigation",
      "description": "Reference to the pseudocode for CIPHER() in Algorithm 1",
      "text": "CIPHER() is specified in the pseudocode in Alg. 1."
    },
    {
      "start": 3654,
      "stop": 4267,
      "category": "Algorithm",
      "description": "Pseudocode implementation of the CIPHER() function",
      "text": "```\nAlgorithm 1 Pseudocode for CIPHER()\n    procedure CIPHER(in, Nr, w)\n        state ← in ▷ See Sec. 3.4\n        state ← ADDROUNDKEY(state, w[0..3]) ▷ See Sec. 5.1.4\n        for round from 1 to Nr-1 do\n            state ← SUBBYTES(state) ▷ See Sec.5.1.1\n            state ← SHIFTROWS(state) ▷ See Sec.5.1.2\n            state ← MIXCOLUMNS(state) ▷ See Sec.5.1.3\n            state ← ADDROUNDKEY(state, w[4*round..4*round+3])\n        end for\n        state ← SUBBYTES(state)\n        state ← SHIFTROWS(state)\n        state ← ADDROUNDKEY(state, w[4*Nr..4*Nr+3])\n        return state ▷ See Sec.3.4\n    end procedure\n```"
    },
    {
      "start": 4269,
      "stop": 4680,
      "category": "Elaboration",
      "description": "Explanation of the steps in the CIPHER() algorithm, including initial state setup, round transformations, and final output",
      "text": "The first step (Line 2) is to copy the input into the state array using the conventions from Sec. 3.4. After an initial round key addition (Line 3), the state array is transformed by Nr applications of the round function (Lines 4-12); the final round (Lines 10-12) differs in that the MixColumns() transformation is omitted. The final state is then returned as the output (Line 13), as described in Section 3.4."
    },
    {
      "start": 4682,
      "stop": 4702,
      "category": "Navigation",
      "description": "Section header for SubBytes() transformation",
      "text": "### 5.1.1 SubBytes()"
    },
    {
      "start": 4704,
      "stop": 4907,
      "category": "Definition",
      "description": "Definition of SUBBYTES() as an invertible, non-linear transformation using an S-box",
      "text": "SUBBYTES() is an invertible, non-linear transformation of the state in which a substitution table, called an S-box, is applied independently to each byte in the state. The AES S-box is denoted by SBox()."
    },
    {
      "start": 4909,
      "stop": 5116,
      "category": "Definition",
      "description": "Introduction to the two-step construction of the S-box output byte",
      "text": "Let $b$ denote an input byte to SBox(), and let $c$ denote the constant byte $\\{01100011\\}$. The output byte $b^{\\prime}=\\operatorname{SBOX}(b)$ is constructed by composing the following two transformations:"
    },
    {
      "start": 5118,
      "stop": 5362,
      "category": "Algorithm",
      "description": "First step of S-box transformation: computing the multiplicative inverse in the finite field",
      "text": "1. Define an intermediate value $\\tilde{b}$, as follows, where $b^{-1}$ is the multiplicative inverse of $b$, as described in Section 4.4:\n$$\n\\tilde{b}= \\begin{cases}\\{00\\} & \\text{if } b=\\{00\\} \\\\ b^{-1} & \\text{if } b \\neq\\{00\\}\\end{cases}\n$$"
    },
    {
      "start": 5364,
      "stop": 5652,
      "category": "Algorithm",
      "description": "Second step of S-box transformation: applying an affine transformation to the bits",
      "text": "2. Apply the following affine transformation of the bits of $\\tilde{b}$ to produce the bits of $b^{\\prime}$:\n$$\nb_{i}^{\\prime}=\\tilde{b}_{i} \\oplus \\tilde{b}_{(i+4) \\bmod 8} \\oplus \\tilde{b}_{(i+5) \\bmod 8} \\oplus \\tilde{b}_{(i+6) \\bmod 8} \\oplus \\tilde{b}_{(i+7) \\bmod 8} \\oplus c_{i}\n$$"
    },
    {
      "start": 5654,
      "stop": 6464,
      "category": "Elaboration",
      "description": "Matrix form representation of the affine transformation in the S-box",
      "text": "The matrix form of Eq. (5.3) is given by Eq. (5.4) below:\n$$\n\\left[\\begin{array}{l}\nb_{0}^{\\prime} \\\\\nb_{1}^{\\prime} \\\\\nb_{2}^{\\prime} \\\\\nb_{3}^{\\prime} \\\\\nb_{4}^{\\prime} \\\\\nb_{5}^{\\prime} \\\\\nb_{6}^{\\prime} \\\\\nb_{7}^{\\prime}\n\\end{array}\\right]=\\left[\\begin{array}{llllllll}\n1 & 0 & 0 & 0 & 1 & 1 & 1 & 1 \\\\\n1 & 1 & 0 & 0 & 0 & 1 & 1 & 1 \\\\\n1 & 1 & 1 & 0 & 0 & 0 & 1 & 1 \\\\\n1 & 1 & 1 & 1 & 0 & 0 & 0 & 1 \\\\\n1 & 1 & 1 & 1 & 1 & 0 & 0 & 0 \\\\\n0 & 1 & 1 & 1 & 1 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 1 & 1 & 1 & 1 & 0 \\\\\n0 & 0 & 0 & 1 & 1 & 1 & 1 & 1\n\\end{array}\\right]\\left[\\begin{array}{c}\n\\tilde{b}_{0} \\\\\n\\tilde{b}_{1} \\\\\n\\tilde{b}_{2} \\\\\n\\tilde{b}_{3} \\\\\n\\tilde{b}_{4} \\\\\n\\tilde{b}_{5} \\\\\n\\tilde{b}_{6} \\\\\n\\tilde{b}_{7}\n\\end{array}\\right]+\\left[\\begin{array}{l}\n1 \\\\\n1 \\\\\n0 \\\\\n0 \\\\\n0 \\\\\n1 \\\\\n1 \\\\\n0\n\\end{array}\\right].\n$$"
    },
    {
      "start": 6466,
      "stop": 6523,
      "category": "Navigation",
      "description": "Reference to Figure 2 illustrating the SUBBYTES() transformation",
      "text": "Figure 2 illustrates how SUBBYTES() transforms the state."
    },
    {
      "start": 6525,
      "stop": 6563,
      "category": "Diagram",
      "description": "Figure caption for illustration of SUBBYTES()",
      "text": "[Figure 2. Illustration of SUBBYTES()]"
    },
    {
      "start": 6565,
      "stop": 6839,
      "category": "Example",
      "description": "Explanation of how to use the S-box table with an example",
      "text": "The AES S-box is presented in hexadecimal form in Table 4. For example, if $s_{r, c}=\\{53\\}$, then the substitution value would be determined by the intersection of the row with index '5' and the column with index '3' in Table 4, so that $s_{r, c}^{\\prime}=\\{\\mathrm{ed}\\}$."
    },
    {
      "start": 6841,
      "stop": 8575,
      "category": "Parameter",
      "description": "Table 4 showing the S-box substitution values in hexadecimal format",
      "text": "**Table 4. SBox(): substitution values for the byte xy (in hexadecimal format)**\n|   |   | Y |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|   |   | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e | f |\n|   | 0 | 63 | 7c | 77 | 7b | f2 | 6b | 6f | c5 | 30 | 01 | 67 | 2b | fe | d7 | ab | 76 |\n|   | 1 | ca | 82 | c9 | 7d | fa | 59 | 47 | f0 | ad | d4 | a2 | af | 9c | a4 | 72 | c0 |\n|   | 2 | b7 | fd | 93 | 26 | 36 | 3f | f7 | cc | 34 | a5 | e5 | f1 | 71 | d8 | 31 | 15 |\n|   | 3 | 04 | c7 | 23 | c3 | 18 | 96 | 05 | 9a | 07 | 12 | 80 | e2 | eb | 27 | b2 | 75 |\n|   | 4 | 09 | 83 | 2c | 1a | 1b | 6e | 5a | a0 | 52 | 3b | d6 | b3 | 29 | e3 | 2f | 84 |\n| X | 5 | 53 | d1 | 00 | ed | 20 | fc | b1 | 5b | 6a | cb | be | 39 | 4a | 4c | 58 | cf |\n|   | 6 | d0 | ef | aa | fb | 43 | 4d | 33 | 85 | 45 | f9 | 02 | 7f | 50 | 3c | 9f | a8 |\n|   | 7 | 51 | a3 | 40 | 8f | 92 | 9d | 38 | f5 | bc | b6 | da | 21 | 10 | ff | f3 | d2 |\n|   | 8 | cd | 0c | 13 | ec | 5f | 97 | 44 | 17 | c4 | a7 | 7e | 3d | 64 | 5d | 19 | 73 |\n|   | 9 | 60 | 81 | 4f | dc | 22 | 2a | 90 | 88 | 46 | ee | b8 | 14 | de | 5e | 0b | db |\n|   | a | e0 | 32 | 3a | 0a | 49 | 06 | 24 | 5c | c2 | d3 | ac | 62 | 91 | 95 | e4 | 79 |\n|   | b | e7 | c8 | 37 | 6d | 8d | d5 | 4e | a9 | 6c | 56 | f4 | ea | 65 | 7a | ae | 08 |\n|   | c | ba | 78 | 25 | 2e | 1c | a6 | b4 | c6 | e8 | dd | 74 | 1f | 4b | bd | 8b | 8a |\n|   | d | 70 | 3e | b5 | 66 | 48 | 03 | f6 | 0e | 61 | 35 | 57 | b9 | 86 | c1 | 1d | 9e |\n|   | e | e1 | f8 | 98 | 11 | 69 | d9 | 8e | 94 | 9b | 1e | 87 | e9 | ce | 55 | 28 | df |\n|   | f | 8c | a1 | 89 | 0d | bf | e6 | 42 | 68 | 41 | 99 | 2d | 0f | b0 | 54 | bb | 16 |"
    },
    {
      "start": 8577,
      "stop": 8598,
      "category": "Navigation",
      "description": "Section header for ShiftRows() transformation",
      "text": "### 5.1.2 ShiftRows()"
    },
    {
      "start": 8600,
      "stop": 8917,
      "category": "Definition",
      "description": "Definition of SHIFTROWS() as a transformation that cyclically shifts bytes in the last three rows of the state",
      "text": "SHIFTROWS() is a transformation of the state in which the bytes in the last three rows of the state are cyclically shifted. The number of positions by which the bytes are shifted depends on the row index $r$, as follows:\n$$\ns_{r, c}^{\\prime}=s_{r,(c+r) \\bmod 4} \\quad \\text{for } 0 \\leq r<4 \\text{ and } 0 \\leq c<4\n$$"
    },
    {
      "start": 8919,
      "stop": 9178,
      "category": "Elaboration",
      "description": "Elaboration on how SHIFTROWS() moves bytes within each row of the state",
      "text": "SHIFTROWS() is illustrated in Figure 3. In that representation of the state, the effect is to move each byte by $r$ positions to the left in the row, cycling the left-most $r$ bytes around to the right end of the row. The first row, where $r=0$, is unchanged."
    },
    {
      "start": 9180,
      "stop": 9219,
      "category": "Diagram",
      "description": "Figure caption for illustration of SHIFTROWS()",
      "text": "[Figure 3. Illustration of SHIFTROWS()]"
    },
    {
      "start": 9221,
      "stop": 9243,
      "category": "Navigation",
      "description": "Section header for MixColumns() transformation",
      "text": "### 5.1.3 MixColumns()"
    },
    {
      "start": 9245,
      "stop": 9513,
      "category": "Definition",
      "description": "Definition of MIXCOLUMNS() as a transformation that multiplies each column of the state by a fixed matrix",
      "text": "MixColumns() is a transformation of the state that multiplies each of the four columns of the state by a single fixed matrix, as described in Section 4.3, with its entries taken from the following word:\n$$\n[a_{0}, a_{1}, a_{2}, a_{3}]=[\\{02\\},\\{01\\},\\{01\\},\\{03\\}].\n$$"
    },
    {
      "start": 9515,
      "stop": 9890,
      "category": "Algorithm",
      "description": "Matrix multiplication formula for the MIXCOLUMNS() transformation",
      "text": "Thus,\n$$\n\\left[\\begin{array}{l}\ns_{0, c}^{\\prime} \\\\\ns_{1, c}^{\\prime} \\\\\ns_{2, c}^{\\prime} \\\\\ns_{3, c}^{\\prime}\n\\end{array}\\right]=\\left[\\begin{array}{llll}\n02 & 03 & 01 & 01 \\\\\n01 & 02 & 03 & 01 \\\\\n01 & 01 & 02 & 03 \\\\\n03 & 01 & 01 & 02\n\\end{array}\\right]\\left[\\begin{array}{l}\ns_{0, c} \\\\\ns_{1, c} \\\\\ns_{2, c} \\\\\ns_{3, c}\n\\end{array}\\right] \\quad \\text{for } 0 \\leq c<4\n$$"
    },
    {
      "start": 9892,
      "stop": 10445,
      "category": "Algorithm",
      "description": "Expanded definition of individual output bytes for the MIXCOLUMNS() transformation",
      "text": "so that the individual output bytes are defined as follows:\n$$\n\\begin{aligned}\ns_{0, c}^{\\prime} & =(\\{02\\} \\bullet s_{0, c}) \\oplus (\\{03\\} \\bullet s_{1, c}) \\oplus s_{2, c} \\oplus s_{3, c} \\\\\ns_{1, c}^{\\prime} & =s_{0, c} \\oplus (\\{02\\} \\bullet s_{1, c}) \\oplus (\\{03\\} \\bullet s_{2, c}) \\oplus s_{3, c} \\\\\ns_{2, c}^{\\prime} & =s_{0, c} \\oplus s_{1, c} \\oplus (\\{02\\} \\bullet s_{2, c}) \\oplus (\\{03\\} \\bullet s_{3, c}) \\\\\ns_{3, c}^{\\prime} & =(\\{03\\} \\bullet s_{0, c}) \\oplus s_{1, c} \\oplus s_{2, c} \\oplus (\\{02\\} \\bullet s_{3, c}).\n\\end{aligned}\n$$"
    },
    {
      "start": 10447,
      "stop": 10481,
      "category": "Navigation",
      "description": "Reference to Figure 4 illustrating MIXCOLUMNS()",
      "text": "Figure 4 illustrates MixColumns()."
    },
    {
      "start": 10483,
      "stop": 10523,
      "category": "Diagram",
      "description": "Figure caption for illustration of MIXCOLUMNS()",
      "text": "[Figure 4. Illustration of MixColumns()]"
    },
    {
      "start": 10525,
      "stop": 10548,
      "category": "Navigation",
      "description": "Section header for ADDROUNDKEY() transformation",
      "text": "### 5.1.4 ADDROUNDKEY()"
    },
    {
      "start": 10550,
      "stop": 11389,
      "category": "Definition",
      "description": "Definition of ADDROUNDKEY() as a transformation that combines a round key with the state using XOR operation",
      "text": "ADDROUNDKEY() is a transformation of the state in which a round key is combined with the state by applying the bitwise XOR operation. In particular, each round key consists of four words from the key schedule (described in Section 5.2), each of which is combined with a column of the state as follows:\n$$\n[s_{0, c}^{\\prime}, s_{1, c}^{\\prime}, s_{2, c}^{\\prime}, s_{3, c}^{\\prime}]=[s_{0, c}, s_{1, c}, s_{2, c}, s_{3, c}] \\oplus [w_{(4 * \\text{round}+c)}] \\quad \\text{for } 0 \\leq c<4\n$$\nwhere round is a value in the range $0 \\leq$ round $\\leq Nr$, and $w[i]$ is the array of key schedule words described in Section 5.2. In the specification of CIPHER(), ADDROUNDKEY() is invoked $Nr+1$ times - once prior to the first application of the round function (see Alg. 1) and once within each of the $Nr$ rounds, when $1 \\leq$ round $\\leq Nr$."
    },
    {
      "start": 11391,
      "stop": 11547,
      "category": "Elaboration",
      "description": "Reference to Figure 5 illustrating ADDROUNDKEY() with additional context about byte addressing",
      "text": "The action of this transformation is illustrated in Fig. 5, where $l=4*$ round. The byte address within words of the key schedule was described in Sec. 3.5."
    },
    {
      "start": 11549,
      "stop": 11590,
      "category": "Diagram",
      "description": "Figure caption for illustration of ADDROUNDKEY()",
      "text": "[Figure 5. Illustration of ADDROUNDKEY()]"
    },
    {
      "start": 11592,
      "stop": 12171,
      "category": "Algorithm",
      "description": "Pseudocode implementation of the KEYEXPANSION() function",
      "text": "```\nAlgorithm 2 Pseudocode for KEYEXPANSION()\n    procedure KEYEXPANSION(key)\n        i ← 0\n        while i ≤ Nk-1 do\n            w[i] ← key[4*i..4*i+3]\n            i ← i+1\n        end while ▷ When the loop concludes, i=Nk.\n        while i ≤ 4*Nr+3 do\n            temp ← w[i-1]\n            if i mod Nk=0 then\n                temp ← SUBWORD(ROTWORD(temp)) ⊕ Rcon[i/Nk]\n            else if Nk>6 and i mod Nk=4 then\n                temp ← SUBWORD(temp)\n            end if\n            w[i] ← w[i-Nk] ⊕ temp\n            i ← i+1\n        end while\n        return w\n    end procedure\n```"
    },
    {
      "start": 12173,
      "stop": 12253,
      "category": "Navigation",
      "description": "Reference to figures illustrating KEYEXPANSION() for the three AES variants",
      "text": "Figures 6, 7, and 8 illustrate KEYEXPANSION() for AES-128, AES-192, and AES-256."
    },
    {
      "start": 12255,
      "stop": 12273,
      "category": "Navigation",
      "description": "Section header for INVCIPHER() function",
      "text": "## 5.3 INVCIPHER()"
    },
    {
      "start": 12275,
      "stop": 12573,
      "category": "Definition",
      "description": "Overview of INVCIPHER() as the inverse of CIPHER(), using inverted transformations in reverse order",
      "text": "To implement INVCIPHER(), the transformations in the specification of CIPHER() (Section 5.1) are inverted and executed in reverse order. The inverted transformations of the state - denoted by InvShiftRows(), InvSubBytes(), InvMixColumns(), and ADDROUNDKEY() - are described in Sections 5.3.1-5.3.4."
    },
    {
      "start": 12575,
      "stop": 12703,
      "category": "Navigation",
      "description": "Reference to the pseudocode for INVCIPHER() in Algorithm 3",
      "text": "INVCIPHER() is described in the pseudocode in Alg. 3, where the array $w$ denotes the key schedule, as described in Section 5.2."
    },
    {
      "start": 12705,
      "stop": 12848,
      "category": "Diagram",
      "description": "Figure caption for illustration of KEYEXPANSION() for AES-128",
      "text": "[Figure 6. KEYEXPANSION() of AES-128 to generate the words $w[i]$ for $4 \\leq i<44$, where $l$ ranges over the multiples of 4 between 0 and 36]"
    },
    {
      "start": 12850,
      "stop": 12993,
      "category": "Diagram",
      "description": "Figure caption for illustration of KEYEXPANSION() for AES-192",
      "text": "[Figure 7. KEYEXPANSION() of AES-192 to generate the words $w[i]$ for $6 \\leq i<52$, where $l$ ranges over the multiples of 6 between 0 and 42]"
    },
    {
      "start": 12995,
      "stop": 13138,
      "category": "Diagram",
      "description": "Figure caption for illustration of KEYEXPANSION() for AES-256",
      "text": "[Figure 8. KEYEXPANSION() of AES-256 to generate the words $w[i]$ for $8 \\leq i<60$, where $l$ ranges over the multiples of 8 between 0 and 48]"
    },
    {
      "start": 13140,
      "stop": 13165,
      "category": "Navigation",
      "description": "Section header for InvMixColumns() transformation",
      "text": "### 5.3.3 InvMixColumns()"
    },
    {
      "start": 13167,
      "stop": 13490,
      "category": "Definition",
      "description": "Definition of INVMIXCOLUMNS() as the inverse of MIXCOLUMNS(), multiplying columns by a fixed matrix",
      "text": "InvMixColumns() is the inverse of MixColumns(). In particular, InvMixColumns() multiplies each of the four columns of the state by a single fixed matrix, as described in Section 4.3, with its entries taken from the following word:\n$$\n[a_{0}, a_{1}, a_{2}, a_{3}]=[\\{0\\mathrm{e}\\},\\{09\\},\\{0\\mathrm{d}\\},\\{0\\mathrm{b}\\}].\n$$"
    },
    {
      "start": 13492,
      "stop": 13975,
      "category": "Algorithm",
      "description": "Matrix multiplication formula for the INVMIXCOLUMNS() transformation",
      "text": "Thus,\n$$\n\\left[\\begin{array}{c}\ns_{0, c}^{\\prime} \\\\\ns_{1, c}^{\\prime} \\\\\ns_{2, c}^{\\prime} \\\\\ns_{3, c}^{\\prime}\n\\end{array}\\right]=\\left[\\begin{array}{cccc}\n0\\mathrm{e} & 0\\mathrm{b} & 0\\mathrm{d} & 09 \\\\\n09 & 0\\mathrm{e} & 0\\mathrm{b} & 0\\mathrm{d} \\\\\n0\\mathrm{d} & 09 & 0\\mathrm{e} & 0\\mathrm{b} \\\\\n0\\mathrm{b} & 0\\mathrm{d} & 09 & 0\\mathrm{e}\n\\end{array}\\right]\\left[\\begin{array}{l}\ns_{0, c} \\\\\ns_{1, c} \\\\\ns_{2, c} \\\\\ns_{3, c}\n\\end{array}\\right] \\quad \\text{for } 0 \\leq c<4\n$$"
    },
    {
      "start": 13977,
      "stop": 14815,
      "category": "Algorithm",
      "description": "Expanded definition of individual output bytes for the INVMIXCOLUMNS() transformation",
      "text": "As a result of this matrix multiplication, the four bytes in a column are replaced by the following:\n$$\n\\begin{aligned}\ns_{0, c}^{\\prime} & =(\\{0\\mathrm{e}\\} \\bullet s_{0, c}) \\oplus (\\{0\\mathrm{b}\\} \\bullet s_{1, c}) \\oplus (\\{0\\mathrm{d}\\} \\bullet s_{2, c}) \\oplus (\\{09\\} \\bullet s_{3, c}) \\\\\ns_{1, c}^{\\prime} & =(\\{09\\} \\bullet s_{0, c}) \\oplus (\\{0\\mathrm{e}\\} \\bullet s_{1, c}) \\oplus (\\{0\\mathrm{b}\\} \\bullet s_{2, c}) \\oplus (\\{0\\mathrm{d}\\} \\bullet s_{3, c}) \\\\\ns_{2, c}^{\\prime} & =(\\{0\\mathrm{d}\\} \\bullet s_{0, c}) \\oplus (\\{09\\} \\bullet s_{1, c}) \\oplus (\\{0\\mathrm{e}\\} \\bullet s_{2, c}) \\oplus (\\{0\\mathrm{b}\\} \\bullet s_{3, c}) \\\\\ns_{3, c}^{\\prime} & =(\\{0\\mathrm{b}\\} \\bullet s_{0, c}) \\oplus (\\{0\\mathrm{d}\\} \\bullet s_{1, c}) \\oplus (\\{09\\} \\bullet s_{2, c}) \\oplus (\\{0\\mathrm{e}\\} \\bullet s_{3, c}).\n\\end{aligned}\n$$"
    },
    {
      "start": 14817,
      "stop": 14851,
      "category": "Navigation",
      "description": "Section header for the inverse of ADDROUNDKEY() transformation",
      "text": "### 5.3.4 Inverse of ADDROUNDKEY()"
    },
    {
      "start": 14853,
      "stop": 14915,
      "category": "Definition",
      "description": "Statement that ADDROUNDKEY() is its own inverse",
      "text": "ADDROUNDKEY(), described in Section 5.1.4, is its own inverse."
    },
    {
      "start": 14917,
      "stop": 14940,
      "category": "Navigation",
      "description": "Section header for EQINVCIPHER() function",
      "text": "### 5.3.5 EQINVCIPHER()"
    },
    {
      "start": 14942,
      "stop": 15439,
      "category": "Definition",
      "description": "Explanation of EQINVCIPHER() as an alternative specification of the inverse cipher with reference to efficiency considerations",
      "text": "Several properties of the AES algorithm allow for an alternative specification of the inverse of CIPHER(), called the equivalent inverse cipher, denoted by EQINVCIPHER(). In the specification of EQINVCIPHER(), the transformations of the round function of the cipher in Alg. 1 are directly replaced by their inverses in EQINVCIPHER(), in the same order. The efficiency of this structure in comparison to the specification of INVCIPHER() in Alg. 3 is explained in the Rijndael proposal document [2]."
    },
    {
      "start": 15441,
      "stop": 15700,
      "category": "Navigation",
      "description": "Introduction to the pseudocode for EQINVCIPHER() and KEYEXPANSIONEIC()",
      "text": "The pseudocode for the equivalent inverse cipher, given in Alg. 4, uses a modified key schedule, denoted by the word array $dw$. The routine to generate $dw$ is an extension of KEYEXPANSION(), denoted by KEYEXPANSIONEIC(), whose pseudocode is given in Alg. 5."
    },
    {
      "start": 15702,
      "stop": 16254,
      "category": "Algorithm",
      "description": "Pseudocode implementation of the EQINVCIPHER() function",
      "text": "```\nAlgorithm 4 Pseudocode for EQINVCIPHER()\n    procedure EQINVCIPHER(in, Nr, dw)\n        state ← in\n        state ← ADDROUNDKEY(state, dw[4*Nr..4*Nr+3])\n        for round from Nr-1 downto 1 do\n            state ← INVSUBBYTES(state)\n            state ← INVSHIFTROWS(state)\n            state ← INVMIXCOLUMNS(state)\n            state ← ADDROUNDKEY(state, dw[4*round..4*round+3])\n        end for\n        state ← INVSUBBYTES(state)\n        state ← INVSHIFTROWS(state)\n        state ← ADDROUNDKEY(state, dw[0..3])\n        return state\n    end procedure\n```"
    },
    {
      "start": 16256,
      "stop": 17040,
      "category": "Algorithm",
      "description": "Pseudocode implementation of the KEYEXPANSIONEIC() function",
      "text": "```\nAlgorithm 5 Pseudocode for KEYEXPANSIONEIC()\n    procedure KEYEXPANSIONEIC(key)\n        i ← 0\n        while i ≤ Nk-1 do\n            w[i] ← key[4i..4i+3]\n            dw[i] ← w[i]\n            i ← i+1\n        end while ▷ When the loop concludes, i=Nk.\n        while i ≤ 4*Nr+3 do\n            temp ← w[i-1]\n            if i mod Nk=0 then\n                temp ← SUBWORD(ROTWORD(temp)) ⊕ Rcon[i/Nk]\n            else if Nk>6 and i mod Nk=4 then\n                temp ← SUBWORD(temp)\n            end if\n            w[i] ← w[i-Nk] ⊕ temp\n            dw[i] ← w[i]\n            i ← i+1\n        end while\n        for round from 1 to Nr-1 do\n            i ← 4*round\n            dw[i..i+3] ← INVMIXCOLUMNS(dw[i..i+3]) ▷ Note change of type.\n        end for\n        return dw\n    end procedure\n```"
    },
    {
      "start": 17042,
      "stop": 17335,
      "category": "Elaboration",
      "description": "Explanation of how the modified key schedule in KEYEXPANSIONEIC() differs from the original key schedule",
      "text": "The first and last round keys in $dw$ are the same as in $w$; the modification of the other round keys is described in Lines 19-22. The comment in Line 21 refers to the input to InvMixColumns(): the one-dimensional array of words is converted to a two-dimensional array of bytes, as in Fig. 1."
    }
  ]