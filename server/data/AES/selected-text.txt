\documentclass[10pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{hyperref}
\hypersetup{colorlinks=true, linkcolor=blue, filecolor=magenta, urlcolor=cyan,}
\urlstyle{same}
\usepackage{graphicx}
\usepackage[export]{adjustbox}
\graphicspath{ {./images/} }
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage[version=4]{mhchem}
\usepackage{stmaryrd}
\usepackage{multirow}

\title{Advanced Encryption Standard (AES) }

\author{Published: November 26, 2001}
\date{}


%New command to display footnote whose markers will always be hidden
\let\svthefootnote\thefootnote
\newcommand\blfootnotetext[1]{%
  \let\thefootnote\relax\footnote{#1}%
  \addtocounter{footnote}{-1}%
  \let\thefootnote\svthefootnote%
}

%Overriding the \footnotetext command to hide the marker if its value is `0`
\let\svfootnotetext\footnotetext
\renewcommand\footnotetext[2][?]{%
  \if\relax#1\relax%
    \ifnum\value{footnote}=0\blfootnotetext{#2}\else\svfootnotetext{#2}\fi%
  \else%
    \if?#1\ifnum\value{footnote}=0\blfootnotetext{#2}\else\svfootnotetext{#2}\fi%
    \else\svfootnotetext[#1]{#2}\fi%
  \fi
}

\begin{document}
\maketitle
Information Technology Laboratory\\
National Institute of Standards and Technology\\
Gaithersburg, MD 20899-8900

This publication is available free of charge from:\\
\href{https://doi.org/10.6028/NIST.FIPS.197-upd1}{https://doi.org/10.6028/NIST.FIPS.197-upd1}

Published November 26, 2001; Updated May 9, 2023\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-01}\\
U.S. Department of Commerce

Donald L. Evans, Secretary\\
Technology Administration\\
Phillip J. Bond, Under Secretary for Technology\\
National Institute of Standards and Technology\\
Karen H. Brown, Acting Director

\section*{Foreword}
The Federal Information Processing Standards Publication Series of the National Institute of Standards and Technology is the official series of publications relating to standards and guidelines developed under 15 U.S.C. 278 g -3, and issued by the Secretary of Commerce under 40 U.S.C. 11331.

Comments concerning this Federal Information Processing Standard publication are welcomed and should be submitted using the contact information in the "Inquiries and comments" clause of the announcement section.

James A. St. Pierre, Acting Director\\
Information Technology Laboratory

\begin{abstract}
In 2000, NIST announced the selection of the Rijndael block cipher family as the winner of the Advanced Encryption Standard (AES) competition. Block ciphers are the foundation for many cryptographic services, especially those that provide assurance of the confidentiality of data.\\
Three members of the Rijndael family are specified in this Standard: AES-128, AES-192, and AES-256. Each of them transforms data in blocks of 128 bits, and the numerical suffix indicates the bit length of the associated cryptographic keys.
\end{abstract}

Keywords: AES; block cipher; confidentiality; cryptography; encryption; Rijndael.

\section*{Federal Information \\
 Processing Standards Publication 197 }
Updated: May 9, 2023

\section*{Announcing the ADVANCED ENCRYPTION STANDARD (AES)}
Federal Information Processing Standards Publications (FIPS) are developed by NIST under 15 U.S.C. \(278 \mathrm{~g}-3\) and issued by the Secretary of Commerce under 40 U.S.C. 11331.

\begin{enumerate}
  \item Name of Standard. Advanced Encryption Standard (AES) (FIPS 197).
  \item Category of Standard. Computer Security Standard, Cryptography.
  \item Explanation. The Advanced Encryption Standard (AES) specifies a FIPS-approved cryptographic algorithm that can be used to protect electronic data. The AES algorithm is a symmetric block cipher that can encrypt (encipher) and decrypt (decipher) digital information.
\end{enumerate}

The AES algorithm is capable of using cryptographic keys of 128, 192, and 256 bits to encrypt and decrypt data in blocks of 128 bits.\\
4. Approving Authority. Secretary of Commerce.\\
5. Maintenance Agency. Department of Commerce, National Institute of Standards and Technology, Information Technology Laboratory (ITL).\\
6. Applicability. Federal Information Processing Standards apply to information systems used or operated by federal agencies, a contractor of an agency, or other organization on behalf of an agency. They do not apply to national security systems as defined in 44 U.S.C. 3552.

This Standard may be used by federal agencies to protect information when they have determined that encryption is appropriate, in accordance with applicable Office of Management and Budget and agency policies. Federal agencies may also use alternative methods that NIST has indicated are appropriate for this purpose.

This Standard may be adopted and used by non-Federal Government organizations.\\
7. Specifications. Federal Information Processing Standard (FIPS) 197, Advanced Encryption Standard (AES) (affixed).\\
8. Implementations. The algorithm specified in this Standard may be implemented in software, firmware, hardware, or any combination thereof. The specific implementation may depend on several factors, such as the application, the environment, the technology used, etc. The algorithm shall be used in conjunction with a FIPS-approved or NIST-recommended mode of operation. Object Identifiers (OIDs) and any associated parameters for AES used in\\
these modes are available at the Computer Security Objects Register (CSOR), located at \href{https://csrc.nist.gov/projects/csor}{https://csrc.nist.gov/projects/csor}.

NIST has developed a validation program to test implementations for conformance to the algorithms in this Standard. Information about the validation program is available at https: \href{//nist.gov/cmvp}{//nist.gov/cmvp}. Examples for each key size are available at \href{https://csrc.nist.gov/projects/aes}{https://csrc.nist.gov/projects/aes}.\\
9. Implementation Schedule. This Standard became effective on May 26, 2002.\\
10. Patents. Implementations of the algorithm specified in this Standard may be covered by U.S. and foreign patents.\\
11. Export Control. Certain cryptographic devices and technical data regarding them are subject to federal export controls. Exports of cryptographic modules implementing this Standard and technical data regarding them must comply with all federal laws and regulations and must be licensed by the Bureau of Industry and Security of the U.S. Department of Commerce. Information about export regulations is available at \href{https://www.bis.doc.gov}{https://www.bis.doc.gov}.\\
12. Qualifications. NIST will continue to follow developments in the analysis of the AES algorithm. As with its other cryptographic algorithm standards, NIST will formally reevaluate this Standard every five years.

Both this Standard and possible threats reducing the security provided through the use of this Standard will undergo review by NIST as appropriate, taking into account newly available analysis and technology. In addition, the awareness of any breakthrough in technology or any mathematical weakness of the algorithm will cause NIST to reevaluate this Standard and provide necessary revisions.\\
13. Where to Obtain Copies. This publication is available by accessing \href{https://csrc.nist.gov/}{https://csrc.nist.gov/} publications. Other computer security publications are available at the same website.\\
14. Inquiries and Comments. Inquiries and comments about this FIPS may be submitted to \href{mailto:fips-197-comments@nist.gov}{fips-197-comments@nist.gov}.\\
15. How to Cite This Publication. NIST has assigned NIST FIPS 197-upd1 as the publication identifier for this FIPS, per the NIST Technical Series Publication Identifier Syntax. NIST recommends that it be cited as follows:

National Institute of Standards and Technology (2001) Advanced Encryption Standard (AES). (Department of Commerce, Washington, D.C.), Federal Information Processing Standards Publication (FIPS) NIST FIPS 197-upd1, updated May 9, 2023. \href{https://doi.org/10.6028/NIST.FIPS.197-upd1}{https://doi.org/10.6028/NIST.FIPS.197-upd1}

\section*{Federal Information \\
 Processing Standards Publication 197}
\section*{Specification for the ADVANCED ENCRYPTION STANDARD (AES)}
\section*{Table of Contents}
1 Introduction ..... 1\\
2 Definitions ..... 2\\
2.1 Terms and Acronyms ..... 2\\
2.2 List of Functions ..... 3\\
2.3 Algorithm Parameters and Symbols ..... 4\\
3 Notation and Conventions ..... 5\\
3.1 Inputs and Outputs ..... 5\\
3.2 Bytes ..... 5\\
3.3 Indexing of Byte Sequences ..... 5\\
3.4 The State ..... 6\\
3.5 Arrays of Words ..... 7\\
4 Mathematical Preliminaries ..... 8\\
4.1 Addition in GF ( \(\mathbf{2}^{8}\) ) ..... 8\\
4.2 Multiplication in GF( \(2^{8}\) ) ..... 8\\
4.3 Multiplication of Words by a Fixed Matrix ..... 9\\
4.4 Multiplicative Inverses in GF( \(\mathbf{2}^{8}\) ) ..... 10\\
5 Algorithm Specifications ..... 11\\
5.1 Cipher() ..... 12\\
5.1.1 SubBYTES() ..... 13\\
5.1.2 ShiftRows() ..... 14\\
5.1.3 MixColumns() ..... 15\\
5.1.4 AddRoundKey() ..... 16\\
5.2 KEYEXPANSION() ..... 17\\
5.3 INVCIPHER() ..... 18\\
5.3.1 InVShiftRows() ..... 22\\
5.3.2 InvSubB Ytes() ..... 23\\
5.3.3 InVMixColumns() ..... 24\\
5.3.4 Inverse of ADDROUNDKEY() ..... 24\\
5.3.5 EQINVCIPHER() ..... 24\\
6 Implementation Considerations ..... 26\\
6.1 Key Length Requirements ..... 26\\
6.2 Keying Restrictions ..... 26\\
6.3 Parameter Extensions ..... 26\\
6.4 Implementation Suggestions Regarding Various Platforms ..... 26\\
6.5 Modes of Operation ..... 27\\
References ..... 28\\
Appendix A - Key Expansion Examples ..... 29\\
A. 1 Expansion of a 128-bit Key ..... 29\\
A. 2 Expansion of a 192-bit Key ..... 30\\
A. 3 Expansion of a 256-bit Key ..... 32\\
Appendix B - Cipher Example ..... 34\\
Appendix C - Example Vectors ..... 36\\
Appendix D - Change Log (Informative) ..... 37

\section*{List of Tables}
Table 1 Hexadecimal representation of 4-bit sequences ..... 5\\
Table 2 Indices for bytes and bits ..... 6\\
Table 3 Key-Block-Round Combinations ..... 11\\
Table \(4 \quad\) SBox(): substitution values for the byte xy (in hexadecimal format) ..... 14\\
Table 5 Round constants ..... 17\\
Table 6 InvSB ox(): substitution values for the byte xy (in hexadecimal format) ..... 23\\
List of Figures\\
Figure 1 State array input and output ..... 7\\
Figure 2 Illustration of SUbB YTES() ..... 13\\
Figure 3 Illustration of SHIFTROws() ..... 15\\
Figure 4 Illustration of MixColumns() ..... 16\\
Figure 5 Illustration of AddRoundKEY() ..... 16\\
Figure 6 KEyExpansion() of AES-128 to generate the words \(w[i]\) for \(4 \leq i<44\), where \(l\) ranges over the multiples of 4 between 0 and 36 ..... 19\\
Figure \(7 \quad \operatorname{KEyExpansion}()\) of AES-192 to generate the words \(w[i]\) for \(6 \leq i<52\), where \(l\) ranges over the multiples of 6 between 0 and 42 ..... 20\\
Figure 8 KEyExpansion() of AES-256 to generate the words \(w[i]\) for \(8 \leq i<60\), where \(l\) ranges over the multiples of 8 between 0 and 48 ..... 21\\
Figure 9 Illustration of InvSHIFTRows() ..... 23\\
List of Algorithms\\
Algorithm 1 Pseudocode for CIPHER() ..... 12\\
Algorithm 2 Pseudocode for KEyEXPANSION() ..... 18\\
Algorithm 3 Pseudocode for INVCIPHER() ..... 22\\
Algorithm 4 Pseudocode for EQINVCIPHER() ..... 25\\
Algorithm 5 Pseudocode for KEyExpansionEIC() ..... 25

\section*{1. Introduction}
A block is a sequence of bits of a given fixed length. A block cipher is a family of permutations of blocks that is parameterized by a sequence of bits called the key.

In 1997, NIST initiated the Advanced Encryption Standard (AES) development effort [1] and called for the public to submit candidate algorithms for block ciphers. Block ciphers are the foundation for many cryptographic services, especially those that provide assurance of the confidentiality of data. In 2000, NIST announced the selection of Rijndael [2, 3] for the AES.

This Standard specifies three instantiations of Rijndael: AES-128, AES-192, and AES-256, where the suffix indicates the bit length of the key. The block size (i.e., the length of the data inputs and outputs) is 128 bits in each case. Rijndael supports additional block sizes and key lengths that are not adopted in this Standard.

This Standard is organized as follows:

\begin{itemize}
  \item Section 2 defines the terms, acronyms, algorithm parameters, symbols, and functions in this Standard.
  \item Section 3 describes the notation and conventions for the ordering and indexing of bits, bytes, and words.
  \item Section 4 explains some mathematical components of the AES specifications: finite field arithmetic and multiplication by a fixed matrix of finite field elements.
  \item Section 5 specifies AES-128, AES-192, and AES-256.
  \item Section 6 provides implementation guidelines on key length requirements, keying restrictions, parameter extensions, and implementation suggestions regarding various platforms.
  \item Appendix A gives examples of the key expansion routines for AES-128, AES-192, and AES-256.
  \item Appendix B gives a step-by-step example of an invocation of AES-128.
  \item Appendix C gives a reference to the NIST website for extensive example vectors for AES-128, AES-192, and AES-256.
  \item Appendix D summarizes the updates to the original version of this publication.
\end{itemize}

\section*{2. Definitions}
\subsection*{2.1 Terms and Acronyms}
The following definitions are used in this Standard:

\begin{center}
\begin{tabular}{ll}
AES & Advanced Encryption Standard. \\
Affine &  \\
transformation & \begin{tabular}{l}
A transformation consisting of multiplication by a matrix, followed \\
by the addition of a vector. \\
\end{tabular} \\
Array & \begin{tabular}{l}
A fixed-size data structure that stores a collection of elements, where \\
each element is identified by its integer index or indices. \\
\end{tabular} \\
Bit & \begin{tabular}{l}
A binary digit: 0 or 1. \\
\end{tabular} \\
Block sequence of bits of a given fixed length. In this Standard, blocks &  \\
consist of 128 bits, sometimes represented as arrays of bytes or words. &  \\
\end{tabular}
\end{center}

\subsection*{2.2 List of Functions}
The following functions are specified in this Standard:

ADDROUNDKEY() The transformation of the state in which a round key is combined with the state.\\
AES-128()\\
AES-192()\\
AES-256()\\
CIPHER()

EQInvCipher() The inverse of CiPher() in which \(d w\) replaces \(w\) as the key schedule parameter.

INVCIPHER()\\
InvMixColumnS()\\
InvSBox()\\
INVSHIFTRowS()\\
The inverse of CIPHER().\\
The inverse of MIXCOLUMNS().\\
The inverse of SBOX().

InVSUbB yTES() The inverse of SubB ytes().\\
KeyExpansion() The routine that generates the round keys from the key.\\
KEYEXPANSIONEIC() The routine that generates the modified round keys for the equivalent inverse cipher.\\
MixColumns() The transformation of the state that takes all of the columns of the state and mixes their data (independently of one another) to produce new columns.\\
ROTWORD() The transformation of words in which the four bytes of the word are permuted cyclically.\\
SBox() The transformation of bytes defined by the S-box.\\
ShiftRows()\\
The transformation of the state in which the last three rows are cyclically shifted by different offsets.\\
SubBytes() The transformation of the state that applies the \(S\)-box independently to each byte of the state.\\
SubWord() The transformation of words in which the S-box is applied to each of the four bytes of the word.\\
XTIMES() The transformation of bytes in which the polynomial representation of the input byte is multiplied by \(x\), modulo \(m(x)\), to produce the polynomial representation of the output byte.

\subsection*{2.3 Algorithm Parameters and Symbols}
\begin{center}
\begin{tabular}{|c|c|}
\hline
\(b^{-1}\) & The multiplicative inverse of the element \(b\) in \(\operatorname{GF}\left(2^{8}\right)\). \\
\hline
b & The input to the affine transformation in the AES S-box. \\
\hline
\(d w\) & Word array for the key schedule that is input to the equivalent inverse cipher. \\
\hline
GF(2) & Finite field with two elements. \\
\hline
GF( \(2^{8}\) ) & Finite field with 256 elements. \\
\hline
in & The data input to CiPHER() or InvCipher(), represented as an array of 16 bytes indexed from 0 to 15 . \\
\hline
\(m(x)\) & The modulus specified in this standard for the polynomial representation of bytes as elements of \(\operatorname{GF}\left(2^{8}\right)\). \\
\hline
key & The array of \(N k\) words that comprise the key for AES-128, AES192, or AES-256. \\
\hline
Nb & The number of columns comprising the state, where each column is a 32 -bit word. For this Standard, \(N b=4\). \\
\hline
Nk & The number of 32-bit words comprising the key. \(N k\) is assigned to 4, 6, and 8 for AES-128, AES-192, and AES-256, respectively. (see Section 6.3). \\
\hline
Nr & The number of rounds. \(N r\) is assigned to 10,12 , and 14 for AES128, AES-192, and AES-256, respectively. \\
\hline
out & The data output of CIPHER() or InVCIPHER(), represented as an array of 16 bytes indexed from 0 to 15 . \\
\hline
Rcon & Word array for the round constant. \\
\hline
state & The state, represented as a two-dimensional array of 16 bytes, with rows and columns indexed from 0 to 3 . \\
\hline
\(u[i]\) & For a one-dimensional array \(u\) of words or bytes, the element in the array that is indexed by a non-negative integer \(i\). \\
\hline
\(u[i . . i+3]\) & For an array \(u\) of words, the sequence \(u[i], u[i+1], u[i+2], u[i+3]\). \\
\hline
w & Word array for the key schedule. \\
\hline
\(\oplus\) & Either the exclusive-OR operation on bits, the bitwise exclusive-OR operation on bytes, or the bitwise exclusive-OR operation on words. \\
\hline
- & Multiplication in \(\mathrm{GF}\left(2^{8}\right)\). \\
\hline
* & Integer multiplication. \\
\hline
\(\leftarrow\) & Assignment of a variable in pseudocode. \\
\hline
\{\} & Delimiters for a byte in hexadecimal or binary notation. \\
\hline
\end{tabular}
\end{center}

\section*{3. Notation and Conventions}
\subsection*{3.1 Inputs and Outputs}
A bit is a binary digit - 0 or 1 . A block is a sequence of 128 bits; the data input and output for the AES block ciphers are blocks. Another input to the AES block ciphers, called the key, is a bit sequence that is typically established beforehand and maintained across many invocations of the block cipher. The lengths of the keys for AES-128, AES-192, and AES-256 are 128 bits, 192 bits, and 256 bits, respectively.

\subsection*{3.2 Bytes}
The basic processing unit in the AES algorithms is the byte - a sequence of eight bits.\\
A byte value is denoted by the concatenation of the eight bits between braces (e.g., \(\{10100011\}\) ). When the bits of a byte are denoted by an indexed variable, the convention in this Standard is for the indices to decrease from left to right (i.e., \(\left.\left\{b_{7} b_{6} b_{5} b_{4} b_{3} b_{2} b_{1} b_{0}\right\}\right)\).\\
It is also convenient to denote byte values using hexadecimal notation. The 16 hexadecimal characters represent sequences of four bits, as listed in Table 1. A byte is represented by an ordered pair of hexadecimal characters, where the left character in the pair represents the four left-most bits(i.e., \(\left.b_{7}, b_{6}, b_{5}, b_{4}\right)\), and the right character in the pair represents the four right-most bits (i.e., \(b_{3}, b_{2}, b_{1}, b_{0}\) ). For example, the hexadecimal form of the byte \(\{10100011\}\) is \(\{\mathrm{a} 3\}\).

Table 1. Hexadecimal representation of 4-bit sequences

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|}
\hline
Sequence & 0000 & 0001 & 0010 & 0011 & 0100 & 0101 & 0110 & 0111 \\
\hline
Character & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 \\
\hline\hline
Sequence & 1000 & 1001 & 1010 & 1011 & 1100 & 1101 & 1110 & 1111 \\
\hline
Character & 8 & 9 & a & b & c & d & e & f \\
\hline
\end{tabular}
\end{center}

\subsection*{3.3 Indexing of Byte Sequences}
In order to unambiguously represent the data and key inputs as sequences of bytes, the following indexing convention is adopted in this Standard. Given a sequence of \(8 k\) bits,

\[
r_{0} r_{1} r_{2} \ldots r_{(8 k-3)} r_{(8 k-2)} r_{(8 k-1)}
\]

(for some positive integer \(k\) ), the bytes \(a_{j}\) for \(0 \leq j \leq k-1\) are defined as follows:

\[
a_{j}=\left\{\begin{array}{llll}
r_{8 j} r_{(8 j+1)} & \ldots r_{(8 j+7)}
\end{array}\right\}
\]

Thus, for example, the data block

\[
r_{0} r_{1} r_{2} \ldots r_{125} r_{126} r_{127}
\]

is represented by the byte sequence

\[
a_{0} a_{1} a_{2} \ldots a_{13} a_{14} a_{15}
\]

where

\[
\begin{aligned}
a_{0}= & \left\{\begin{array}{llll}
r_{0} & r_{1} & \ldots & r_{7}
\end{array}\right\} \\
a_{1} & =\left\{\begin{array}{llll}
r_{8} & r_{9} & \ldots & r_{15}
\end{array}\right\} \\
& \vdots \\
a_{15} & =\left\{\begin{array}{llll}
r_{120} & r_{121} & \ldots & r_{127}
\end{array}\right\} .
\end{aligned}
\]

As described in Section 3.2, the bits within any individual byte are indexed in decreasing order from left to right. This ordering is more natural for the finite field arithmetic on bytes that is described in Section 4. The two types of bit indices for byte sequences are illustrated in Table 2.

\section*{Table 2. Indices for bytes and bits}
\begin{center}
\begin{tabular}{|l||c|c|c|c|c|c|c|c||c|c|c|c|c|c|c|c||l|}
\hline
Bit index in sequence & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & 13 & 14 & 15 & \(\ldots\) \\
\hline
Byte index & \multicolumn{13}{|c|}{0} & \multicolumn{1}{c|}{} &  &  &  \\
\hline
Bit index in byte & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 & 7 & 6 & 5 & 4 & 3 & 2 & 1 & 0 & \(\ldots\) \\
\hline
\end{tabular}
\end{center}

\subsection*{3.4 The State}
Internally, the algorithms for the AES block ciphers are performed on a two-dimensional (four-by-four) array of bytes called the state. In the state array, denoted by \(s\), each individual byte has two indices: a row index \(r\) in the range \(0 \leq r<4\) and a column index \(c\) in the range \(0 \leq c<4\). An individual byte of the state is denoted by either \(s_{r, c}\) or \(s[r, c]\).

In the specifications for the AES block cipher algorithms in Section 5, the first step is to copy the input array of bytes \(i n_{0}, i n_{1}, \ldots, i n_{15}\) to the state array \(s\) as follows:

\[
s[r, c]=\operatorname{in}[r+4 c] \quad \text { for } 0 \leq r<4 \text { and } 0 \leq c<4
\]

A sequence of transformations is then applied to the state array, after which its final value is copied to the output array of bytes out \({ }_{0}\), out \({ }_{1}, \ldots\), out \(_{15}\) as follows:

\[
\text { out }[r+4 c]=s[r, c] \quad \text { for } 0 \leq r<4 \text { and } 0 \leq c<4 \text {. }
\]

The correspondence between the indices of the input and output with the indices of the state array is illustrated in Fig. 1.

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
\multicolumn{4}{|c|}{input bytes} & \multicolumn{5}{|c|}{state array} & \multicolumn{5}{|c|}{output bytes} \\
\hline
\(i n\) & \(i n_{4}\) & in \(_{8}\) & \(i n_{12}\) &  & \(S_{0,0}\) & \(S_{0,1}\) & \(s_{0,2}\) & \(s_{0,3}\) &  & out \({ }_{0}\) & out \(_{4}\) & out8 & out \(_{12}\) \\
\hline
\(i n^{i n_{1}}\) & \(i n^{i n_{5}}\) & \(i n^{i n d_{9}}\) & in \(_{13}\) & \(>\) & \(s_{1,0}\) & \(s_{1,1}\) & \(s_{1,2}\) & \(s_{1,3}\) & \(>\) & out \(_{1}\) & out5 & out \(_{9}\) & out \(_{13}\) \\
\hline
\(i n_{2}\) & \(i n^{v_{6}}\) & \(i n_{10}\) & \(i n{ }^{14}\) & 7 & \(s_{2,0}\) & \(s_{2,1}\) & \(s_{2,2}\) & \(S_{2,3}\) & 7 & out \(_{2}\) & out \(_{6}\) & out \(_{10}\) & out \(_{14}\) \\
\hline
\(i n\) & \(i n^{i_{7}}\) & \({ }^{i n} 11\) & in \(_{15}\) &  & \(S_{3,0}\) & \(S_{3,1}\) & \(s_{3,2}\) & \(S_{3,3}\) &  & out \(_{3}\) & out7 & out \(_{11}\) & out \(_{15}\) \\
\hline
\end{tabular}
\end{center}

Figure 1. State array input and output

\subsection*{3.5 Arrays of Words}
A word is a sequence of four bytes; a block consists of four words. The four columns of state array \(s\) are interpreted as an array \(v\) of four words as follows, in the notation of Fig. 1:

\[
v_{0}=\left(\begin{array}{l}
s_{0,0} \\
s_{1,0} \\
s_{2,0} \\
s_{3,0}
\end{array}\right), \quad v_{1}=\left(\begin{array}{l}
s_{0,1} \\
s_{1,1} \\
s_{2,1} \\
s_{3,1}
\end{array}\right), \quad v_{2}=\left(\begin{array}{l}
s_{0,2} \\
s_{1,2} \\
s_{2,2} \\
s_{3,2}
\end{array}\right), \quad v_{3}=\left(\begin{array}{l}
s_{0,3} \\
s_{1,3} \\
s_{2,3} \\
s_{3,3}
\end{array}\right) .
\]

Thus, the column index \(c\) of \(s\) becomes the index for \(v\), and the row index \(r\) of \(s\) becomes the index for the four bytes in each word.

Given a one-dimensional array \(u\) of words, \(u[i]\) denotes the word that is indexed by \(i\), and the sequence of four words \(u[i], u[i+1], u[i+2], u[i+3]\) is denoted by \(u[i . . i+3]\).

\section*{4. Mathematical Preliminaries}
For some transformations of the AES algorithms specified in Sec. 5, each byte in the state array is interpreted as one of the 256 elements of a finite field, also known as a Galois Field, denoted by \(\operatorname{GF}\left(2^{8}\right)\). \({ }^{1}\)

In order to define addition and multiplication in \(\mathrm{GF}\left(2^{8}\right)\), each byte \(\left\{b_{7} b_{6} b_{5} b_{4} b_{3} b_{2} b_{1} b_{0}\right\}\) is interpreted as a polynomial, denoted by \(b(x)\), as follows:

\[
b(x)=b_{7} x^{7}+b_{6} x^{6}+b_{5} x^{5}+b_{4} x^{4}+b_{3} x^{3}+b_{2} x^{2}+b_{1} x+b_{0} .
\]

For example, \(\{01100011\}\) is represented by the polynomial \(x^{6}+x^{5}+x+1\).

\subsection*{4.1 Addition in GF( \(\mathbf{2}^{8}\) )}
In order to add two elements in the finite field \(\mathrm{GF}\left(2^{8}\right)\), the coefficients of the polynomials that represent the elements are added modulo 2 (i.e., with the exclusive-OR operation, denoted by \(\oplus\) ), so that \(1 \oplus 1=0,1 \oplus 0=1\), and \(0 \oplus 0=0\).

Equivalently, two bytes can be added by applying the exclusive-OR operation to each pair of corresponding bits in the bytes. Thus, the sum of \(\left\{a_{7} a_{6} a_{5} a_{4} a_{3} a_{2} a_{1} a_{0}\right\}\) and \(\left\{b_{7} b_{6} b_{5} b_{4} b_{3} b_{2} b_{1} b_{0}\right\}\) is \(\left\{a_{7} \oplus b_{7} \quad a_{6} \oplus b_{6} \quad a_{5} \oplus b_{5} \quad a_{4} \oplus b_{4} \quad a_{3} \oplus b_{3} \quad a_{2} \oplus b_{2} \quad a_{1} \oplus b_{1} \quad a_{0} \oplus b_{0}\right\}\). (In Section 5.1.4, this definition is extended to words.)

For example, the following three representations of addition are equivalent:

\[
\begin{array}{lr}
\left(x^{6}+x^{4}+x^{2}+x+1\right)+\left(x^{7}+x+1\right)=x^{7}+x^{6}+x^{4}+x^{2} & \text { (polynomial) } \\
\{01010111\} \oplus\{10000011\}=\{11010100\} & \text { (binary) } \\
\{57\} \oplus\{83\}=\{d 4\} & \text { (hexadecimal) }
\end{array}
\]

Because the coefficients of the polynomials are reduced modulo 2, the coefficient 1 is equivalent to the coefficient -1 , so addition is equivalent to subtraction. For example, \(x^{4}+x^{2}\) represents the same finite field element as \(x^{4}-x^{2},-x^{4}+x^{2}\), and \(-x^{4}-x^{2}\). Similarly, the sum of any element with itself is the zero element.

\subsection*{4.2 Multiplication in GF ( \(2^{8}\) )}
The symbol • denotes multiplication in \(\mathrm{GF}\left(2^{8}\right)\). Conceptually, this multiplication is defined on two bytes in two steps: 1) the two polynomials that represent the bytes are multiplied as polynomials, and 2 ) the resulting polynomial is reduced modulo the following fixed polynomial:

\[
m(x)=x^{8}+x^{4}+x^{3}+x+1
\]

Within both steps, the individual coefficients of the polynomials are reduced modulo 2.

\footnotetext{\({ }^{1}\) Information about the properties of finite fields can be found in textbooks, such as Michael Artin's Algebra [4].
}Thus, if \(b(x)\) and \(c(x)\) represent bytes \(b\) and \(c\), then \(b \bullet c\) is represented by the following modular reduction of their product as polynomials:

\[
b(x) c(x) \quad \bmod m(x)
\]

The modular reduction by \(m(x)\) may be applied to intermediate steps in the calculation of \(b(x) c(x)\); consequently, it is useful to consider the special case that \(c(x)=x\) (i.e., \(c=\{02\}\) ). In particular, the product \(b \bullet\{02\}\) can be expressed as a function of \(b\), denoted by \(\operatorname{XTimes}(b)\), as follows:

\[
\operatorname{xTimES}(b)=\left\{\begin{array} { l l } 
{ \{ b _ { 6 } b _ { 5 } b _ { 4 } b _ { 3 } b _ { 2 } b _ { 1 } b _ { 0 } 0 \} } & { \text { if } b _ { 7 } = 0 } \\
{ \{ b _ { 6 } b _ { 5 } b _ { 4 } b _ { 3 } b _ { 2 } b _ { 1 } b _ { 0 } 0 \} }
\end{array} \left\{\begin{array}{ll}
00011011\} & \text { if } b_{7}=1
\end{array}\right.\right.
\]

Multiplication by higher powers of \(x\) (such as \(\{04\},\{08\}\), and \(\{10\}\) ) can be implemented by the repeated application of XTIMES(). For example, let \(b=\{57\}\) :

\[
\begin{aligned}
& \{57\} \bullet\{01\}=\{57\} \\
& \{57\} \bullet\{02\}=\operatorname{xTIMES}(\{57\})=\{\mathrm{ae}\} \\
& \{57\} \bullet\{04\}=\operatorname{xTIMES}(\{\mathrm{ae}\})=\{47\} \\
& \{57\} \bullet\{08\}=\operatorname{xTimES}(\{47\})=\{8 \mathrm{e}\} \\
& \{57\} \bullet\{10\}=\operatorname{xTIMES}(\{8 \mathrm{e}\})=\{07\} \\
& \{57\} \bullet\{20\}=\operatorname{xTIMES}(\{07\})=\{0 \mathrm{e}\} \\
& \{57\} \bullet\{40\}=\operatorname{xTimes}(\{0 \mathrm{e}\})=\{1 \mathrm{c}\} \\
& \{57\} \bullet\{80\}=\operatorname{xTimES}(\{1 \mathrm{c}\})=\{38\} .
\end{aligned}
\]

These products facilitate the computation of any multiple of \(\{57\}\). For example, because \(\{13\}=\) \(\{10\} \oplus\{02\} \oplus\{01\}\), it follows that

\[
\begin{aligned}
\{57\} \bullet\{13\} & =\{57\} \bullet(\{01\} \oplus\{02\} \oplus\{10\}) \\
& =\{57\} \oplus\{\mathrm{ae}\} \oplus\{07\} \\
& =\{\mathrm{fe}\} .
\end{aligned}
\]

\subsection*{4.3 Multiplication of Words by a Fixed Matrix}
Two transformations - MixColumns() and InVMixColumns() - in the algorithms for the AES block ciphers can be expressed in terms of matrix multiplication. In particular, a distinct fixed matrix is specified for each transformation. For both matrices, each of the 16 entries of the matrix is a byte of a single specified word, denoted here by \(\left[a_{0}, a_{1}, a_{2}, a_{3}\right]\).

Given an input word \(\left[b_{0}, b_{1}, b_{2}, b_{3}\right]\) to the transformation, the output word \(\left[d_{0}, d_{1}, d_{2}, d_{3}\right]\) is determined by finite field arithmetic as follows:

\[
\begin{aligned}
& d_{0}=\left(a_{0} \bullet b_{0}\right) \oplus\left(a_{3} \bullet b_{1}\right) \oplus\left(a_{2} \bullet b_{2}\right) \oplus\left(a_{1} \bullet b_{3}\right) \\
& d_{1}=\left(a_{1} \bullet b_{0}\right) \oplus\left(a_{0} \bullet b_{1}\right) \oplus\left(a_{3} \bullet b_{2}\right) \oplus\left(a_{2} \bullet b_{3}\right) \\
& d_{2}=\left(a_{2} \bullet b_{0}\right) \oplus\left(a_{1} \bullet b_{1}\right) \oplus\left(a_{0} \bullet b_{2}\right) \oplus\left(a_{3} \bullet b_{3}\right) \\
& d_{3}=\left(a_{3} \bullet b_{0}\right) \oplus\left(a_{2} \bullet b_{1}\right) \oplus\left(a_{1} \bullet b_{2}\right) \oplus\left(a_{0} \bullet b_{3}\right) .
\end{aligned}
\]

The matrix form of Eq. (4.8) is

\[
\left[\begin{array}{l}
d_{0} \\
d_{1} \\
d_{2} \\
d_{3}
\end{array}\right]=\left[\begin{array}{llll}
a_{0} & a_{3} & a_{2} & a_{1} \\
a_{1} & a_{0} & a_{3} & a_{2} \\
a_{2} & a_{1} & a_{0} & a_{3} \\
a_{3} & a_{2} & a_{1} & a_{0}
\end{array}\right]\left[\begin{array}{l}
b_{0} \\
b_{1} \\
b_{2} \\
b_{3}
\end{array}\right] .
\]

\subsection*{4.4 Multiplicative Inverses in GF( \(2^{8}\) )}
For a byte \(b \neq\{00\}\), its multiplicative inverse is the unique byte, denoted by \(b^{-1}\), such that

\[
b \bullet b^{-1}=\{01\} .
\]

The definition of the SubBytes() transformation in the specifications of the AES block cipher involves multiplicative inverses in \(\operatorname{GF}\left(2^{8}\right)\), which can be calculated as follows:

\[
b^{-1}=b^{254}
\]

Alternatively, let \(b(x)\) be the polynomial that represents \(b\). The extended Euclidean algorithm [5] can be applied to \(b(x)\) and \(m(x)\) to find polynomials \(a(x)\) and \(c(x)\) such that

\[
b(x) a(x)+m(x) c(x)=1
\]

It follows that \(a(x)\) is the polynomial that represents \(b^{-1}\).

\section*{5. Algorithm Specifications}
The general function for executing AES-128, AES-192, or AES-256 is denoted by CIPHER(); its inverse is denoted by INVCIPHER(). \({ }^{2}\)

The core of the algorithms for CIPHER() and INVCIPHER() is a sequence of fixed transformations of the state called a round. Each round requires an additional input called the round key; the round key is a block that is usually represented as a sequence of four words (i.e., 16 bytes).

An expansion routine, denoted by KEYEXPANSION(), takes the block cipher key as input and generates the round keys as output. In particular, the input to KEyEXPAnsion() is represented as an array of words, denoted by key, and the output is an expanded array of words, denoted by \(w\), called the key schedule.\\
The block ciphers AES-128, AES-192, and AES-256 differ in three respects: 1) the length of the key; 2) the number of rounds, which determines the size of the required key schedule; and 3) the specification of the recursion within KEyEXPANSION(). For each algorithm, the number of rounds is denoted by \(N r\), and the number of words of the key is denoted by \(N k\). (The number of words in the state is denoted by \(N b\) for Rijndael in general; in this Standard, \(N b=4\).) The specific values of \(N k, N b\), and \(N r\) are given in Table 3. No other configurations of Rijndael conform to this Standard.

For implementation issues relating to the key length, block size, and number of rounds, see Section 6.3.

Table 3. Key-Block-Round Combinations

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|}
\hline
 & \multicolumn{2}{|l|}{\begin{tabular}{l}
Key length \\
\(N k\) (in bits) \\
\end{tabular}} &  & \begin{tabular}{l}
ck size \\
(in bits) \\
\end{tabular} & Number of rounds Nr \\
\hline
AES-128 & 4 & 128 & 4 & 128 & 10 \\
\hline
AES-192 & 6 & 192 & 4 & 128 & 12 \\
\hline
AES-256 & 8 & 256 & 4 & 128 & 14 \\
\hline
\end{tabular}
\end{center}

The three inputs to \(\operatorname{CIPHER}()\) are: 1) the data input in, which is a block represented as a linear array of 16 bytes; 2) the number of rounds Nr for the instance; and 3) the round keys. Thus,

\[
\begin{aligned}
& \operatorname{AES}-128(\text { in }, \text { key })=\operatorname{CiPHER}(i n, 10, \operatorname{KEYEXPANSION~}(\text { key })) \\
& \operatorname{AES}-192(\text { in }, \text { key })=\operatorname{CiPHER}(\text { in }, 12, \operatorname{KEYEXPANSION}(\text { key })) \\
& \operatorname{AES}-256(\text { in }, \text { key })=\operatorname{CIPHER}(i n, 14, \operatorname{KEYEXPANSION~}(\text { key }))
\end{aligned}
\]

The inverse permutations are defined by replacing CIPHER() with InvCipHER() in Eq. 5.1.

\footnotetext{\({ }^{2}\) Informally, these functions are sometimes called "encryption" and "decryption," but neutral terminology is appropriate because there are other applications of block ciphers besides encryption.
}The specifications of \(\operatorname{CiPhER}(), \operatorname{KeyExPansion(})\), and InvCiPher() are given in Sections 5.1, 5.2 , and 5.3 , respectively.

\subsection*{5.1 Cipher()}
The rounds in the specification of \(\operatorname{CIPHER}()\) are composed of the following four byte-oriented transformations on the state:

\begin{itemize}
  \item SubBytes() applies a substitution table (S-box) to each byte.
  \item ShiftRows() shifts rows of the state array by different offsets.
  \item MixColumnS() mixes the data within each column of the state array.
  \item AddRoundKey() combines a round key with the state.
\end{itemize}

The four transformations are specified in Sections 5.1.1-5.1.4. In those specifications, the transformed bit, byte, or block is denoted by appending the symbol ' as a superscript on the original variable (i.e., by \(b_{i}^{\prime}, b^{\prime}, s_{i, j}^{\prime}\), or \(s^{\prime}\) ).\\
The round keys for \(\operatorname{AdDRoundKEY}()\) are generated by KEyExPAnsion(), which is specified in Section 5.2. In particular, the key schedule is represented as an array \(w\) of \(4 *(N r+1)\) words.

CIPHER() is specified in the pseudocode in Alg. 1.

\begin{verbatim}
Algorithm 1 Pseudocode for CIPHER()
    procedure CIPHER(in, \(N r, w\) )
        state \(\leftarrow\) in \(\triangleright\) See Sec. 3.4
        state \(\leftarrow \operatorname{ADDRoundKEY}(\) state,\(w[0.3]) \quad \triangleright\) See Sec. 5.1.4
        for round from 1 to \(\mathrm{Nr}-1\) do
            state \(\leftarrow\) SubB YtEs(state) \(\triangleright\) See Sec.5.1.1
            state \(\leftarrow\) ShIFTRows(state) \(\triangleright\) See Sec.5.1.2
            state \(\leftarrow\) MixColumns(state) \(\triangleright\) See Sec.5.1.3
            state \(\leftarrow \operatorname{ADDROUNDKEY}(\) state,\(w[4 *\) round. \(.4 *\) round +3\(])\)
        end for
        state \(\leftarrow\) SUBB YTES(state)
        state \(\leftarrow\) SHIFTRows(state)
        state \(\leftarrow \operatorname{ADDRoundKEY}(\) state,\(w[4 * N r . .4 * N r+3])\)
        return state \(\triangleright\) See Sec.3.4
    end procedure
\end{verbatim}

The first step (Line 2) is to copy the input into the state array using the conventions from Sec. 3.4. After an initial round key addition (Line 3), the state array is transformed by Nr applications of the round function (Lines 4-12); the final round (Lines 10-12) differs in that the MixColumns() transformation is omitted. The final state is then returned as the output (Line 13), as described in Section 3.4.

\subsection*{5.1.1 SubBytes()}
SUBBYTES() is an invertible, non-linear transformation of the state in which a substitution table, called an S-box, is applied independently to each byte in the state. The AES S-box is denoted by SBox().

Let \(b\) denote an input byte to SBox(), and let \(c\) denote the constant byte \(\{01100011\}\). The output byte \(b^{\prime}=\operatorname{SBOX}(b)\) is constructed by composing the following two transformations:

\begin{enumerate}
  \item Define an intermediate value \(\tilde{b}\), as follows, where \(b^{-1}\) is the multiplicative inverse of \(b\), as described in Section 4.4:
\end{enumerate}

\[
\tilde{b}= \begin{cases}\{00\} & \text { if } b=\{00\} \\ b^{-1} & \text { if } b \neq\{00\}\end{cases}
\]

\begin{enumerate}
  \setcounter{enumi}{1}
  \item Apply the following affine transformation of the bits of \(\tilde{b}\) to produce the bits of \(b^{\prime}\) :
\end{enumerate}

\[
b_{i}^{\prime}=\tilde{b}_{i} \oplus \tilde{b}_{(i+4) \bmod 8} \oplus \tilde{b}_{(i+5) \bmod 8} \oplus \tilde{b}_{(i+6) \bmod 8} \oplus \tilde{b}_{(i+7) \bmod 8} \oplus c_{i}
\]

The matrix form of Eq. (5.3) is given by Eq. (5.4) below:

\[
\left[\begin{array}{l}
b_{0}^{\prime} \\
b_{1}^{\prime} \\
b_{2}^{\prime} \\
b_{3}^{\prime} \\
b_{4}^{\prime} \\
b_{5}^{\prime} \\
b_{6}^{\prime} \\
b_{7}^{\prime}
\end{array}\right]=\left[\begin{array}{llllllll}
1 & 0 & 0 & 0 & 1 & 1 & 1 & 1 \\
1 & 1 & 0 & 0 & 0 & 1 & 1 & 1 \\
1 & 1 & 1 & 0 & 0 & 0 & 1 & 1 \\
1 & 1 & 1 & 1 & 0 & 0 & 0 & 1 \\
1 & 1 & 1 & 1 & 1 & 0 & 0 & 0 \\
0 & 1 & 1 & 1 & 1 & 1 & 0 & 0 \\
0 & 0 & 1 & 1 & 1 & 1 & 1 & 0 \\
0 & 0 & 0 & 1 & 1 & 1 & 1 & 1
\end{array}\right]\left[\begin{array}{c}
\tilde{b}_{0} \\
\tilde{b}_{1} \\
\tilde{b}_{2} \\
\tilde{b}_{3} \\
\tilde{b}_{4} \\
\tilde{b}_{5} \\
\tilde{b}_{6} \\
\tilde{b}_{7}
\end{array}\right]+\left[\begin{array}{l}
1 \\
1 \\
0 \\
0 \\
0 \\
1 \\
1 \\
0
\end{array}\right] .
\]

Figure 2 illustrates how SUBB YtES() transforms the state.\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-21}

Figure 2. Illustration of SUbBYteS()

The AES S-box is presented in hexadecimal form in Table 4. For example, if \(s_{r, c}=\{53\}\), then

Table 4. SBox(): substitution values for the byte xy (in hexadecimal format)

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
 &  & \multicolumn{16}{|c|}{Y} \\
\hline
 &  & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & a & b & C & d & e & f \\
\hline
 & 0 & 63 & 7 c & 77 & 7b & f2 & 6b & 6 f & c5 & 30 & 01 & 67 & 2b & fe & d7 & ab & 76 \\
\hline
 & 1 & ca & 82 & c9 & \(7 d\) & fa & 59 & 47 & f0 & ad & d4 & a2 & af & 9 c & a 4 & 72 & c0 \\
\hline
 & 2 & b7 & fd & 93 & 26 & 36 & 3f & f7 & C C & 34 & a 5 & e5 & f1 & 71 & d8 & 31 & 15 \\
\hline
 & 3 & 04 & C 7 & 23 & c3 & 18 & 96 & 05 & 9a & 07 & 12 & 80 & e2 & eb & 27 & b2 & 75 \\
\hline
 & 4 & 09 & 83 & 2 C & \(1 a\) & 1 b & 6 e & 5 a & a 0 & 52 & 3b & d6 & b3 & 29 & e3 & 2 f & 84 \\
\hline
 & 5 & 53 & d1 & 00 & ed & 20 & fc & b1 & 5.b & 6a & cb & be & 39 & 4 a & 4 C & 58 & cf \\
\hline
 & 6 & d0 & ef & aa & fb & 43 & 4 d & 33 & 85 & 45 & f9 & 02 & 7 f & 50 & 3 C & 9 f & a 8 \\
\hline
x & 7 & 51 & a3 & 40 & 8 f & 92 & 9d & 38 & f5 & boc & b6 & da & 21 & 10 & ff & f3 & d2 \\
\hline
x & 8 & cd & 0 c & 13 & ec & 5 f & 97 & 44 & 17 & c4 & a 7 & 7 e & \(3 d\) & 64 & \(5 d\) & 19 & 73 \\
\hline
 & 9 & 60 & 81 & 4 f & dc & 22 & \(2 a\) & 90 & 88 & 46 & ee & b8 & 14 & de & 5 e & 0 b & db \\
\hline
 & a & e 0 & 32 & \(3 a\) & 0 a & 49 & 06 & 24 & 5 c & c2 & d3 & ac & 62 & 91 & 95 & e4 & 79 \\
\hline
 & b & e7 & C8 & 37 & 6d & 8d & d5 & 4 e & a 9 & 6 C & 56 & f4 & ea & 65 & \(7 a\) & ae & 08 \\
\hline
 & C & ba & 78 & 25 & 2 e & 1 C & a 6 & b4 & c6 & e 8 & dd & 74 & 1 f & 4b & bd & 8b & 8 a \\
\hline
 & d & 70 & 3 e & b5 & 66 & 48 & 03 & f6 & 0 e & 61 & 35 & 57 & b9 & 86 & c1 & \(1 d\) & 9 e \\
\hline
 & e & e1 & f8 & 98 & 11 & 69 & d9 & 8 e & 94 & 9b & 1 1e & 87 & e 9 & ce & 55 & 28 & df \\
\hline
 & f & 8 c & a1 & 89 & 0d & bf & e6 & 42 & 68 & 41 & 99 & 2d & 0 f & b0 & 54 & bb & 16 \\
\hline
\end{tabular}
\end{center}

the substitution value would be determined by the intersection of the row with index ' 5 ' and the column with index ' 3 ' in Table 4, so that \(s_{r, c}^{\prime}=\{\mathrm{ed}\}\).

\subsection*{5.1.2 ShIFTRows()}
SHIFTRows() is a transformation of the state in which the bytes in the last three rows of the state are cyclically shifted. The number of positions by which the bytes are shifted depends on the row index \(r\), as follows:

\[
s_{r, c}^{\prime}=s_{r,(c+r) \bmod 4} \quad \text { for } 0 \leq r<4 \text { and } 0 \leq c<4
\]

SHIFTRows() is illustrated in Figure 3. In that representation of the state, the effect is to move each byte by \(r\) positions to the left in the row, cycling the left-most \(r\) bytes around to the right end of the row. The first row, where \(r=0\), is unchanged.\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-23(1)}

\begin{center}
\begin{tabular}{|l|l|l|l|}
\hline
\multicolumn{4}{|c|}{\(s\)} \\
\hline
\(s_{0,0}\) & \(s_{0,1}\) & \(s_{0,2}\) & \(s_{0,3}\) \\
\hline
\(s_{1,0}\) & \(s_{1,1}\) & \(s_{1,2}\) & \(s_{1,3}\) \\
\hline
\(s_{2,0}\) & \(s_{2,1}\) & \(s_{2,2}\) & \(s_{2,3}\) \\
\hline
\(s_{3,0}\) & \(s_{3,1}\) & \(s_{3,2}\) & \(s_{3,3}\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\includegraphics[max width=\textwidth]{2024_12_02_e6e04e495d18277bcb5dg-23}
\end{center}

Figure 3. Illustration of SHIFTRows()

\subsection*{5.1.3 MixColumns()}
MixColumns( ) is a transformation of the state that multiplies each of the four columns of the state by a single fixed matrix, as described in Section 4.3, with its entries taken from the following word:

\[
\left[a_{0}, a_{1}, a_{2}, a_{3}\right]=[\{02\},\{01\},\{01\},\{03\}] .
\]

Thus,

\[
\left[\begin{array}{l}
s_{0, c}^{\prime} \\
s_{1, c}^{\prime} \\
s_{2, c}^{\prime} \\
s_{3, c}^{\prime}
\end{array}\right]=\left[\begin{array}{llll}
02 & 03 & 01 & 01 \\
01 & 02 & 03 & 01 \\
01 & 01 & 02 & 03 \\
03 & 01 & 01 & 02
\end{array}\right]\left[\begin{array}{l}
s_{0, c} \\
s_{1, c} \\
s_{2, c} \\
s_{3, c}
\end{array}\right] \quad \text { for } 0 \leq c<4
\]

so that the individual output bytes are defined as follows:

\[
\begin{aligned}
s_{0, c}^{\prime} & =\left(\{02\} \bullet s_{0, c}\right) \oplus\left(\{03\} \bullet s_{1, c}\right) \oplus s_{2, c} \oplus s_{3, c} \\
s_{1, c}^{\prime} & =s_{0, c} \oplus\left(\{02\} \bullet s_{1, c}\right) \oplus\left(\{03\} \bullet s_{2, c}\right) \oplus s_{3, c} \\
s_{2, c}^{\prime} & =s_{0, c} \oplus s_{1, c} \oplus\left(\{02\} \bullet s_{2, c}\right) \oplus\left(\{03\} \bullet s_{3, c}\right) \\
s_{3, c}^{\prime} & =\left(\{03\} \bullet s_{0, c}\right) \oplus s_{1, c} \oplus s_{2, c} \oplus\left(\{02\} \bullet s_{3, c}\right) .
\end{aligned}
\]

Figure 4 illustrates MixColumns().\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-24(1)}

Figure 4. Illustration of MixColumns()

\subsection*{5.1.4 AddRoundKey()}
ADDRoundKEY() is a transformation of the state in which a round key is combined with the state by applying the bitwise XOR operation. In particular, each round key consists of four words from the key schedule (described in Section 5.2), each of which is combined with a column of the state as follows:

\[
\left[s_{0, c}^{\prime}, s_{1, c}^{\prime}, s_{2, c}^{\prime}, s_{3, c}^{\prime}\right]=\left[s_{0, c}, s_{1, c}, s_{2, c}, s_{3, c}\right] \oplus\left[w_{(4 * \text { round }+c)}\right] \quad \text { for } 0 \leq c<4
\]

where round is a value in the range \(0 \leq\) round \(\leq N r\), and \(w[i]\) is the array of key schedule words described in Section 5.2. In the specification of Cipher(), AddRoundKey() is invoked \(N r+1\) times - once prior to the first application of the round function (see Alg. 1) and once within each of the \(N r\) rounds, when \(1 \leq\) round \(\leq N r\).

The action of this transformation is illustrated in Fig. 5, where \(l=4 *\) round. The byte address within words of the key schedule was described in Sec. 3.5.\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-24}

Figure 5. Illustration of AddRoundKEy()

\begin{verbatim}
Algorithm 2 Pseudocode for KEYEXPANSION()
    procedure KEYEXPANSION(key)
        \(i \leftarrow 0\)
        while \(i \leq N k-1\) do
            \(w[i] \leftarrow k e y[4 * i . .4 * i+3]\)
            \(i \leftarrow i+1\)
        end while \(\quad \triangleright\) When the loop concludes, \(i=N k\).
        while \(i \leq 4 * N r+3\) do
            temp \(\leftarrow w[i-1]\)
            if \(i \bmod N k=0\) then
                temp \(\leftarrow \operatorname{SubWORd}(\operatorname{RotWORD}(\) temp \()) \oplus \operatorname{Rcon}[i / N k]\)
            else if \(N k>6\) and \(i \bmod N k=4\) then
                temp \(\leftarrow \operatorname{SUBWORD}(\) temp \()\)
            end if
            \(w[i] \leftarrow w[i-N k] \oplus\) temp
            \(i \leftarrow i+1\)
        end while
        return \(w\)
    end procedure
\end{verbatim}

Figures 6, 7, and 8 illustrate KEYEXPANSION() for AES-128, AES-192, and AES-256.

\subsection*{5.3 INVCIPHER()}
To implement InvCIPHER(), the transformations in the specification of CIPHER() (Section 5.1) are inverted and executed in reverse order. The inverted transformations of the state - denoted by InvShiftRows(), InvSubB ytes(), InvMixColumns(), and AddRoundKey() - are described in Sections 5.3.1-5.3.4.

InvCipHER() is described in the pseudocode in Alg. 3, where the array \(w\) denotes the key schedule, as described in Section 5.2.\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-27}

Figure 6. KEyExpansion() of AES-128 to generate the words \(w[i]\) for \(4 \leq i<44\), where \(l\) ranges over the multiples of 4 between 0 and 36\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-28}

Figure 7. KeyExpansion() of AES-192 to generate the words \(w[i]\) for \(6 \leq i<52\), where \(l\) ranges over the multiples of 6 between 0 and 42\\
\includegraphics[max width=\textwidth, center]{2024_12_02_e6e04e495d18277bcb5dg-29}

Figure 8. KEyExpansion() of AES-256 to generate the words \(w[i]\) for \(8 \leq i<60\), where \(l\) ranges over the multiples of 8 between 0 and 48

\subsection*{5.3.3 InvMixColumns()}
InvMixColumns() is the inverse of MixColumns(). In particular, InvMixColumns() multiplies each of the four columns of the state by a single fixed matrix, as described in Section 4.3, with its entries taken from the following word:

\[
\left[a_{0}, a_{1}, a_{2}, a_{3}\right]=[\{0 \mathrm{e}\},\{09\},\{0 \mathrm{~d}\},\{0 \mathrm{~b}\}] .
\]

Thus,

\[
\left[\begin{array}{c}
s_{0, c}^{\prime} \\
s_{1, c}^{\prime} \\
s_{2, c}^{\prime} \\
s_{3, c}^{\prime}
\end{array}\right]=\left[\begin{array}{cccc}
0 \mathrm{e} & 0 \mathrm{~b} & 0 \mathrm{~d} & 09 \\
09 & 0 \mathrm{e} & 0 \mathrm{~b} & 0 \mathrm{~d} \\
0 \mathrm{~d} & 09 & 0 \mathrm{e} & 0 \mathrm{~b} \\
0 \mathrm{~b} & 0 \mathrm{~d} & 09 & 0 \mathrm{e}
\end{array}\right]\left[\begin{array}{l}
s_{0, c} \\
s_{1, c} \\
s_{2, c} \\
s_{3, c}
\end{array}\right] \quad \text { for } 0 \leq c<4
\]

As a result of this matrix multiplication, the four bytes in a column are replaced by the following:

\[
\begin{aligned}
s_{0, c}^{\prime} & =\left(\{0 \mathrm{e}\} \bullet s_{0, c}\right) \oplus\left(\{0 \mathrm{~b}\} \bullet s_{1, c}\right) \oplus\left(\{0 \mathrm{~d}\} \bullet s_{2, c}\right) \oplus\left(\{09\} \bullet s_{3, c}\right) \\
s_{1, c}^{\prime} & =\left(\{09\} \bullet s_{0, c}\right) \oplus\left(\{0 \mathrm{e}\} \bullet s_{1, c}\right) \oplus\left(\{0 \mathrm{~b}\} \bullet s_{2, c}\right) \oplus\left(\{0 \mathrm{~d}\} \bullet s_{3, c}\right) \\
s_{2, c}^{\prime} & =\left(\{0 \mathrm{~d}\} \bullet s_{0, c}\right) \oplus\left(\{09\} \bullet s_{1, c}\right) \oplus\left(\{0 \mathrm{e}\} \bullet s_{2, c}\right) \oplus\left(\{0 \mathrm{~b}\} \bullet s_{3, c}\right) \\
s_{3, c}^{\prime} & =\left(\{0 \mathrm{bb}\} \bullet s_{0, c}\right) \oplus\left(\{0 \mathrm{~d}\} \bullet s_{1, c}\right) \oplus\left(\{09\} \bullet s_{2, c}\right) \oplus\left(\{0 \mathrm{e}\} \bullet s_{3, c}\right) .
\end{aligned}
\]

\subsection*{5.3.4 Inverse of AddRoundKey()}
AdDRoundKEY(), described in Section 5.1.4, is its own inverse.

\subsection*{5.3.5 EQInvCIPher()}
Several properties of the AES algorithm allow for an alternative specification of the inverse of CIPHER(), called the equivalent inverse cipher, denoted by EQINVCIPHER(). In the specification of EQInVCIPHER(), the transformations of the round function of the cipher in Alg. 1 are directly replaced by their inverses in EQInvCipher(), in the same order. The efficiency of this structure in comparison to the specification of InvCIPHER() in Alg. 3 is explained in the Rijndael proposal document [2].

The pseudocode for the equivalent inverse cipher, given in Alg. 4, uses a modified key schedule, denoted by the word array \(d w\). The routine to generate \(d w\) is an extension of KEyExpansion(), denoted by KEyEXPAnSIONEIC(), whose pseudocode is given in Alg. 5.

\begin{verbatim}
Algorithm 4 Pseudocode for EQINVCIPHER()
    procedure EQINvCIPHER( \(i n, N r, d w)\)
        state \(\leftarrow\) in
        state \(\leftarrow \operatorname{ADDRoundKEY}(\) state,\(d w[4 * N r . .4 * N r+3])\)
        for round from \(N r-1\) downto 1 do
            state \(\leftarrow \operatorname{InVSUBBYTES(state)}\)
            state \(\leftarrow \mathrm{INVSHIFTROWS(state)}\)
            state \(\leftarrow\) InVMixColumns(state)
            state \(\leftarrow \operatorname{ADDRounDKEY}(\) state,\(d w[4 *\) round.. \(4 *\) round +3\(])\)
        end for
        state \(\leftarrow \operatorname{InVSUBB}\) YTES(state)
        state \(\leftarrow\) INVSHIFTROWS(state)
        state \(\leftarrow \operatorname{ADDRoundKEY}(\) state,\(d w[0 . .3])\)
        return state
    end procedure
\end{verbatim}

\begin{verbatim}
Algorithm 5 Pseudocode for KEYEXPANSIONEIC()
    procedure KEYEXPANSIONEIC(key)
        \(i \leftarrow 0\)
        while \(i \leq N k-1\) do
            \(w[i] \leftarrow k e y[4 i . .4 i+3]\)
            \(d w[i] \leftarrow w[i]\)
            \(i \leftarrow i+1\)
        end while \(\quad \triangleright\) When the loop concludes, \(i=N k\).
        while \(i \leq 4 * N r+3\) do
            temp \(\leftarrow w[i-1]\)
            if \(i \bmod N k=0\) then
                temp \(\leftarrow \operatorname{SUBWORD}(\operatorname{RotWORD}(\) temp \()) \oplus R \operatorname{con}[i / N k]\)
            else if \(N k>6\) and \(i \bmod N k=4\) then
                temp \(\leftarrow \operatorname{SUBWORD}(\) temp \()\)
            end if
            \(w[i] \leftarrow w[i-N k] \oplus t e m p\)
            \(d w[i] \leftarrow w[i]\)
            \(i \leftarrow i+1\)
        end while
        for round from 1 to \(\mathrm{Nr}-1\) do
            \(i \leftarrow 4 *\) round
            \(d w[i . . i+3] \leftarrow \operatorname{InVMixCoLumnS}(d w[i . . i+3]) \quad \triangleright\) Note change of type.
        end for
        return \(d w\)
    end procedure
\end{verbatim}

The first and last round keys in \(d w\) are the same as in \(w\); the modification of the other round keys is described in Lines 19-22. The comment in Line 21 refers to the input to InvMixColumns(): the one-dimensional array of words is converted to a two-dimensional array of bytes, as in Fig. 1.

\section*{6. Implementation Considerations}
\subsection*{6.1 Key Length Requirements}
An implementation of the AES algorithm shall support at least one of the three key lengths specified in Sec. 5: 128, 192, or 256 bits (i.e., \(N k=4,6\), or 8 , respectively). Implementations may optionally support two or three key lengths, which may promote the interoperability of algorithm implementations.

\subsection*{6.2 Keying Restrictions}
When a cryptographic key has been generated appropriately (see NIST Special Publication 800133, Rev. 2 [6] for guidelines), no restriction is imposed when the resulting key is used for the AES algorithm.

\subsection*{6.3 Parameter Extensions}
In Table 3, this Standard explicitly defines the allowed values for the key length ( \(N k\) ), block size \((N b)\), and number of rounds \((N r)\). However, future revisions of this Standard could include changes or additions to the allowed values for those parameters. Therefore, implementers may choose to design their AES implementations with future flexibility in mind.

\subsection*{6.4 Implementation Suggestions Regarding Various Platforms}
Implementation variations are possible that may, in many cases, offer performance or other advantages. Given the same input key and data (plaintext or ciphertext), any implementation that produces the same output (ciphertext or plaintext) as the algorithm specified in this Standard is an equivalent implementation of the AES algorithm.

The AES proposal document [2] and other resources located on the AES page [7] include suggestions on how to efficiently implement the AES algorithm on a variety of platforms. Suggested implementations are intended to explain the inner workings of the AES algorithm but do not provide protection against various implementation attacks.

A physical implementation may leak key-dependent information through side channels, such as the time taken to perform a computation, or when faults are injected into the computation. When such attacks are non-invasive, they can be effective even when there are mechanisms to detect physical tampering of the device. For example, cache-timing attacks may affect AES implementations on software platforms that use a cache to accelerate the access to data from main memory.

Protecting implementations of the AES algorithm against implementation attacks where applicable should be considered. Such considerations are outside of the scope of this document but are taken into account when testing for conformance to the algorithm in this Standard according to the validation program developed by NIST (see \href{https://nist.gov/cmvp}{https://nist.gov/cmvp}).

\subsection*{6.5 Modes of Operation}
Block cipher modes of operation are cryptographic functions that feature a block cipher to provide information services, such as confidentiality and authentication. NIST-recommended modes of operation are specified in the 800-38 series of NIST Special Publications. Further information is available at \href{https://csrc.nist.gov/Projects/block-cipher-techniques/BCM}{https://csrc.nist.gov/Projects/block-cipher-techniques/BCM}.

\section*{References}
[1] James Nechvatal, Elaine Barker, Lawrence Bassham, William Burr, Morris Dworkin, James Foti, and Edward Roback. Report on the Development of the Advanced Encryption Standard (AES). Journal of Research of NIST (NIST JRES), May 2001. \href{https://doi.org/10.6028/jres}{https://doi.org/10.6028/jres}. 106.023.\\[0pt]
[2] Joan Daemen and Vincent Rijmen. AES Proposal: Rijndael Document Version 2. AES Algorithm Submission, September 1999. Available at \href{https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/}{https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/} documents/aes-development/rijndael-ammended.pdf.\\[0pt]
[3] Joan Daemen and Vincent Rijmen. The Design of Rijndael - The Advanced Encryption Standard (AES), Second Edition. Information Security and Cryptography. Springer, 2020. \href{https://doi.org/10.1007/978-3-662-60769-5}{https://doi.org/10.1007/978-3-662-60769-5}.\\[0pt]
[4] Michael Artin. Algebra. Pearson Modern Classic. Pearson, second edition, 2017.\\[0pt]
[5] Alfred J. Menezes, Scott A. Vanstone, and Paul C. Van Oorschot. Handbook of Applied Cryptography. CRC Press, Inc., USA, 1st edition, 1997. \href{https://doi.org/10.1201/9780429466335}{https://doi.org/10.1201/9780429466335}.\\[0pt]
[6] Elaine Barker, Allen Roginsky, and Richard Davis. Recommendation for Cryptographic Key Generation. (National Institute of Standards and Technology, Gaithersburg, MD), NIST Special Publication (SP) 800-133, Rev. 2, June 2020. \href{https://doi.org/10.6028/NIST.SP}{https://doi.org/10.6028/NIST.SP}. 800-133r2.\\[0pt]
[7] National Institute of Standards and Technology. AES Development, 2022. Available at \href{https://csrc.nist.gov/projects/aes}{https://csrc.nist.gov/projects/aes}.\\[0pt]
[8] National Institute of Standards and Technology. Cryptographic Standards and Guidelines: Examples with Intermediate Values, 2022. Available at \href{https://csrc.nist.gov/projects/}{https://csrc.nist.gov/projects/} cryptographic-standards-and-guidelines/example-values.\\[0pt]
[9] National Institute of Standards and Technology. Crypto Publications Review Board, 2022. Available at \href{https://csrc.nist.gov/projects/crypto-publication-review-project}{https://csrc.nist.gov/projects/crypto-publication-review-project}.\\[0pt]
[10] Nicky Mouha. Review of the Advanced Encryption Standard. (National Institute of Standards and Technology, Gaithersburg, MD), NIST Interagency Report (IR) 8319. https: \href{//doi.org/10.6028/NIST.IR.8319}{//doi.org/10.6028/NIST.IR.8319}.

\section*{Appendix A - Key Expansion Examples}
This appendix shows the development of the key schedule for each key size. Note that multi-byte values are presented using the notation described in Sec. 3. The intermediate values produced during the development of the key schedule (see Sec. 5.2) are given in the following table (all values are in hexadecimal format with the exception of the index column (i)).

\section*{A. 1 Expansion of a 128-bit Key}
This section contains the key expansion of the following key:

\[
\text { Key }=2 b 7 e 151628 \text { ae d2 a6 ab f7 } 1588 \text { 09 cf } 4 \mathrm{f} 3 \mathrm{c}
\]

for \(N k=4\), which results in

\[
w_{0}=2 \mathrm{~b} 7 \mathrm{e} 1516 \quad w_{1}=28 \mathrm{aed} 2 \mathrm{a} 6 \quad w_{2}=\mathrm{abf} 71588 \quad w_{3}=09 \mathrm{cf} 4 \mathrm{f} 3 \mathrm{c}
\]

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
\( \begin{gathered} i \\ (\mathrm{dec}) \end{gathered} \) & temp & \begin{tabular}{l}
After \\
RotWord() \\
\end{tabular} & \begin{tabular}{l}
After \\
SubWord() \\
\end{tabular} & Rcon[i/Nk] & After XOR with Rcon & \(w[i-N k]\) & \( \begin{gathered} w[i]= \\ \text { temp } \oplus \\ w[i-N k] \end{gathered} \) \\
\hline
4 & 09cf4f3c & cf4f3c09 & 8a84eb01 & 01000000 & 8b84eb01 & 2b7e1516 & a0fafe17 \\
\hline
5 & a0fafe17 &  &  &  &  & 28aed2a6 & 88542cb1 \\
\hline
6 & 88542cb1 &  &  &  &  & abf71588 & 23a33939 \\
\hline
7 & 23a33939 &  &  &  &  & 09cf4f3c & 2a6c7605 \\
\hline
8 & 2a6c7605 & 6c76052a & 50386be5 & 02000000 & 52386be5 & a0fafel7 & f2c295f2 \\
\hline
9 & f2c295f2 &  &  &  &  & 88542cb1 & 7a96b943 \\
\hline
10 & 7a96b943 &  &  &  &  & 23a33939 & 5935807a \\
\hline
11 & 5935807a &  &  &  &  & 2a6c7605 & 7359f67f \\
\hline
12 & 7359f67f & 59f67f73 & cb42d28f & 04000000 & cf42d28f & f2c295f2 & 3d80477d \\
\hline
13 & 3d80477d &  &  &  &  & 7a96b943 & \(4716 f e 3 e\) \\
\hline
14 & 4716fe3e &  &  &  &  & 5935807a & 1e237e44 \\
\hline
15 & 1e237e44 &  &  &  &  & 7359f67f & 6d7a883b \\
\hline
16 & 6d7a883b & 7a883b6d & dac4e23c & 08000000 & d2c4e23c & 3d80477d & ef44a541 \\
\hline
17 & ef44a541 &  &  &  &  & 4716fe3e & a8525b7f \\
\hline
18 & a8525b7f &  &  &  &  & 1e237e44 & b671253b \\
\hline
19 & b671253b &  &  &  &  & 6d7a883b & db0bad00 \\
\hline
20 & db0bad00 & 0bad00db & 2b9563b9 & 10000000 & 3b9563b9 & ef44a541 & d4d1c6f8 \\
\hline
21 & d4d1c6f8 &  &  &  &  & a8525b7f & 7c839d87 \\
\hline
22 & 7c839d87 &  &  &  &  & b671253b & caf2b8bc \\
\hline
23 & caf2b8bc &  &  &  &  & db0bad00 & 11f915bc \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
24 & 11f915bc & f915bc11 & 99596582 & 20000000 & b9596582 & d4d1c6f8 & 6d88a37a \\
\hline
25 & 6d88a37a &  &  &  &  & 7c839d87 & 110b3efd \\
\hline
26 & 110b3efd &  &  &  &  & caf2b8bc & dbf98641 \\
\hline
27 & dbf98641 &  &  &  &  & 11f915bc & ca0093fd \\
\hline
28 & ca0093fd & \(0093 f d c a\) & 63dc5474 & 40000000 & 23dc5474 & 6d88a37a & 4e54f70e \\
\hline
29 & 4e54f70e &  &  &  &  & 110b3efd & 5f5fc9f3 \\
\hline
30 & 5f5fc9f3 &  &  &  &  & dbf98641 & 84a64fb2 \\
\hline
31 & 84a64fb2 &  &  &  &  & ca0093fd & 4ea6dc4f \\
\hline
32 & 4ea6dc4f & a6dc4f4e & 2486842 f & 80000000 & a486842f & 4e54f70e & ead27321 \\
\hline
33 & ead27321 &  &  &  &  & 5f5fc9f3 & b58dbad2 \\
\hline
34 & b58dbad2 &  &  &  &  & 84a64fb2 & 312bf560 \\
\hline
35 & 312bf560 &  &  &  &  & 4ea6dc4f & 7f8d292f \\
\hline
36 & 7f8d292f & 8d292f7f & 5da515d2 & 1b000000 & 46a515d2 & ead27321 & ac7766f3 \\
\hline
37 & ac7766f3 &  &  &  &  & b58dbad2 & 19fadc21 \\
\hline
38 & 19fadc21 &  &  &  &  & 312bf560 & 28d12941 \\
\hline
39 & 28d12941 &  &  &  &  & 7f8d292f & 575c006e \\
\hline
40 & 575c006e & 5c006e57 & 4a639f5b & 36000000 & 7c639f5b & ac7766f3 & d014f9a8 \\
\hline
41 & d014f9a8 &  &  &  &  & 19fadc21 & c9ee2589 \\
\hline
42 & c9ee2589 &  &  &  &  & 28d12941 & e13f0cc8 \\
\hline
43 & e13f0cc8 &  &  &  &  & 575c006e & b6630ca6 \\
\hline
\end{tabular}
\end{center}

\section*{A. 2 Expansion of a 192-bit Key}
This section contains the key expansion of the following key:

\[
\begin{array}{rl}
\text { Key }= & 8 e \\
73 & \mathrm{~b} 0 \\
\mathrm{f} 7 & \mathrm{da} \\
& 0 \mathrm{e} \\
60 & 64 \\
52 & \mathrm{c} \\
9
\end{array}
\]

for \(N k=6\), which results in

\[
\begin{array}{lll}
w_{0}=8 \mathrm{e} 73 \mathrm{~b} 0 \mathrm{f} 7 & w_{1}=\mathrm{da} 0 \mathrm{e} 6452 & w_{2}=\mathrm{c} 810 \mathrm{f} 32 \mathrm{~b} \\
w_{3}=809079 \mathrm{e} 5 & w_{4}=62 \mathrm{f} 8 \mathrm{ead} 2 & w_{5}=522 \mathrm{c} 6 \mathrm{~b} 7 \mathrm{~b}
\end{array}
\]

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
\( \begin{gathered} i \\ \text { (dec) } \end{gathered} \) & temp & \begin{tabular}{l}
After \\
RoTWoRd（） \\
\end{tabular} & \begin{tabular}{l}
After \\
SubWord() \\
\end{tabular} & Rcon \([i / N k]\) & After XOR with Rcon & \(w[i-N k]\) & \( \begin{gathered} w[i]= \\ \text { temp } \oplus \underset{w[i-N k]}{c} \end{gathered} \) \\
\hline
6 & 522c6b7b & 2c6b7b52 & 717f2100 & 01000000 & 707f2100 & 8e73b0f7 & fe0c91f7 \\
\hline
7 & fe0c91f7 &  &  &  &  & da0e6452 & 2402f5a5 \\
\hline
8 & 2402f5a5 &  &  &  &  & c810f32b & ec12068e \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
9 & \multicolumn{5}{|l|}{ec12068e} & \multirow[t]{2}{*}{\begin{tabular}{l}
809079e5 \\
62f8ead2 \\
\end{tabular}} & \multirow[t]{2}{*}{\(
\begin{aligned}
& 6 c 827 f 6 b \\
& 0 e 7 a 95 b 9
\end{aligned}
\)} \\
\hline
10 & 6c827f6b &  &  &  &  &  &  \\
\hline
11 & 0e7a95b9 &  &  &  &  & 522c6b7b & 5c56fec2 \\
\hline
12 & 5c56fec2 & 56fec25c & b1bb254a & 02000000 & b3bb254a & fe0c91f7 & 4db 7b 4bd \\
\hline
13 & 4 db 7 b 4bd &  &  &  &  & 2402f5a5 & 69b54118 \\
\hline
14 & 69b54118 &  &  &  &  & ec12068e & 85a74796 \\
\hline
15 & 85a74796 &  &  &  &  & 6c827f6b & e92538fd \\
\hline
16 & e92538fd &  &  &  &  & 0e7a95b9 & e75fad44 \\
\hline
17 & e75fad44 &  &  &  &  & 5c56fec2 & bb095386 \\
\hline
18 & bb095386 & 09538 6bb & 01ed44ea & 04000000 & 05ed44ea & 4db 7b 4bd & 485af057 \\
\hline
19 & 485af057 &  &  &  &  & 69b54118 & 21efb14f \\
\hline
20 & 21efb14f &  &  &  &  & 85a74796 & a448f6d9 \\
\hline
21 & a448f6d9 &  &  &  &  & e92538fd & 4d6dce24 \\
\hline
22 & 4d6dce24 &  &  &  &  & e75fad44 & aa326360 \\
\hline
23 & aa326360 &  &  &  &  & bb095386 & 113b30e6 \\
\hline
24 & 113b30e6 & 3b30e611 & e2048e82 & 08000000 & ea048e82 & 485af057 & a25e7ed5 \\
\hline
25 & a25e7ed5 &  &  &  &  & 21efb14f & 83b1cf9a \\
\hline
26 & 83b1cf9a &  &  &  &  & a448f6d9 & 27f93943 \\
\hline
27 & 27f93943 &  &  &  &  & 4d6dce24 & 6a94f767 \\
\hline
28 & 6a94f767 &  &  &  &  & aa326360 & c0a69407 \\
\hline
29 & c0a69407 &  &  &  &  & 113b30e6 & d19da4e1 \\
\hline
30 & d19da4e1 & 9da4e1d1 & 5e49f83e & 10000000 & 4e49f83e & a25e7ed5 & ec1786eb \\
\hline
31 & ec1786eb &  &  &  &  & 83b1cf9a & 6fa64971 \\
\hline
32 & 6fa64971 &  &  &  &  & 27f93943 & 485f7032 \\
\hline
33 & 485f7032 &  &  &  &  & 6a94f767 & 22 cb8755 \\
\hline
34 & 22 cb8755 &  &  &  &  & c0a69407 & e26d1352 \\
\hline
35 & e26d1352 &  &  &  &  & d19da4e1 & 33f0b7b3 \\
\hline
36 & 33f0b 7b3 & f0b7b333 & 8ca96dc3 & 20000000 & aca96dc3 & ec1786eb & 40beeb28 \\
\hline
37 & 40beeb28 &  &  &  &  & 6fa64971 & 2f18a259 \\
\hline
38 & 2f18a259 &  &  &  &  & 485f7032 & 6747d26b \\
\hline
39 & 6747d26b &  &  &  &  & 22 cb8755 & 458c553e \\
\hline
40 & 458c553e &  &  &  &  & e26d1352 & a7e1466c \\
\hline
41 & a7e1466c &  &  &  &  & 33f0b7b3 & 9411f1df \\
\hline
42 & 9411f1df & 11f1df94 & 82a19e22 & 40000000 & c2a19e22 & 40beeb28 & 821f750a \\
\hline
43 & 821f750a &  &  &  &  & 2f18a259 & ad07d753 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
44 & ad07d753 &  &  &  &  & 6747d26b & ca400538 \\
\hline
45 & ca400538 &  &  &  &  & 458c553e & 8fcc5006 \\
\hline
46 & 8fcc5006 &  &  &  &  & a7e1466c & 282d166a \\
\hline
47 & 282d166a &  &  &  &  & 9411f1df & bc3ce7b5 \\
\hline
48 & bc3ce7b5 & 3ce7b5bc & eb94d565 & 80000000 & 6b94d565 & 821f750a & e98ba06f \\
\hline
49 & e98ba06f &  &  &  &  & ad07d753 & 448c773c \\
\hline
50 & 448c773c &  &  &  &  & ca400538 & 8ecc7204 \\
\hline
51 & 8ecc7204 &  &  &  &  & 8fcc5006 & 01002202 \\
\hline
\end{tabular}
\end{center}

\section*{A. 3 Expansion of a 256-bit Key}
This section contains the key expansion of the following key:

\[
\begin{aligned}
& \text { Key }=603 \mathrm{~d} \text { eb } 1015 \text { ca } 71 \text { be } 2 b 73 \text { ae f0 } 857 d 7781 \\
& \text { 1f } 35 \text { 2c } 07 \text { 3b } 6108 \text { d7 2d } 9810 \text { a3 } 0914 \text { df f4 }
\end{aligned}
\]

for \(N k=8\), which results in

\begin{center}
\begin{tabular}{llll}
\(w_{0}=603 \mathrm{deb} 10\) & \(w_{1}=15 \mathrm{ca} 71 \mathrm{be}\) & \(w_{2}=2 \mathrm{~b} 73 \mathrm{aef} 0\) & \(w_{3}=857 \mathrm{~d} 7781\) \\
\(w_{4}=1 \mathrm{f} 352 \mathrm{c} 07\) & \(w_{5}=3 \mathrm{~b} 6108 \mathrm{~d} 7\) & \(w_{6}=2 \mathrm{~d} 9810 \mathrm{a} 3\) & \(w_{7}=0914 \mathrm{dff} 4\) \\
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
\( \begin{gathered} i \\ (\mathrm{dec}) \end{gathered} \) & temp & \begin{tabular}{l}
After \\
RoTWORD（） \\
\end{tabular} & \begin{tabular}{l}
After \\
SuBWord() \\
\end{tabular} & Rcon[i/Nk] & After XOR with Rcon & \(w[i-N k]\) & \( \begin{gathered} w[i]= \\ t e m p \oplus \\ w[i-N k] \end{gathered} \) \\
\hline
8 & \(0914 d f f 4\) & 14dff409 & fa9ebf01 & 01000000 & fb9ebf01 & 603deb10 & 9ba35411 \\
\hline
9 & 9ba35411 &  &  &  &  & 15ca71be & 8e6925af \\
\hline
10 & 8e6925af &  &  &  &  & 2b73aef0 & a51a8b5f \\
\hline
11 & a51a8b5f &  &  &  &  & 857d7781 & 2067fcde \\
\hline
12 & 2067fcde &  & b785b01d &  &  & 1f352c07 & a8b09c1a \\
\hline
13 & a8b09c1a &  &  &  &  & 3b6108d7 & 93d194cd \\
\hline
14 & 93d194cd &  &  &  &  & 2d9810a3 & be49846e \\
\hline
15 & be49846e &  &  &  &  & 0914dff4 & b75d5b9a \\
\hline
16 & b75d5b9a & 5d5b9ab7 & 4c39b8a9 & 02000000 & 4e39b8a9 & 9ba35411 & d59aecb8 \\
\hline
17 & d59aecb8 &  &  &  &  & 8e6925af & 5bf3c917 \\
\hline
18 & 5bf3c917 &  &  &  &  & a51a8b5f & fee94248 \\
\hline
19 & fee94248 &  &  &  &  & 2067fcde & de8ebe96 \\
\hline
20 & de8ebe96 &  & 1d19ae90 &  &  & a8b09c1a & b5a9328a \\
\hline
21 & b5a9328a &  &  &  &  & 93d194cd & 2678a647 \\
\hline
22 & 2678a647 &  &  &  &  & be49846e & 98312229 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
23 & 98312229 &  &  &  &  & b75d5b9a & 2f6c79b3 \\
\hline
24 & 2f6c79b3 & 6c79b32f & 50b66d15 & 04000000 & 54b66d15 & d59aecb8 & 812c81ad \\
\hline
25 & 812c81ad &  &  &  &  & 5bf3c917 & dadf48ba \\
\hline
26 & dadf48ba &  &  &  &  & fee94248 & 24360af2 \\
\hline
27 & 24360af2 &  &  &  &  & de8ebe96 & fab8b464 \\
\hline
28 & fab8b464 &  & 2d6c8d43 &  &  & b5a9328a & 98c5bfc9 \\
\hline
29 & 98c5bfc9 &  &  &  &  & 2678a647 & bebd198e \\
\hline
30 & bebd198e &  &  &  &  & 98312229 & 268c3ba7 \\
\hline
31 & 268c3ba7 &  &  &  &  & 2f6c79b3 & \(09 e 04214\) \\
\hline
32 & \(09 e 04214\) & e0421409 & e12cfa01 & 08000000 & e92cfa01 & 812c81ad & 68007bac \\
\hline
33 & 68007 bac &  &  &  &  & dadf48ba & b2df3316 \\
\hline
34 & b2df3316 &  &  &  &  & 24360af2 & 96e939e4 \\
\hline
35 & 96e939e4 &  &  &  &  & fab8b464 & 6c518d80 \\
\hline
36 & 6c518d80 &  & 50d15dcd &  &  & 98c5bfc9 & c814e204 \\
\hline
37 & c814e204 &  &  &  &  & bebd198e & 76a9fb8a \\
\hline
38 & 76a9fb8a &  &  &  &  & 268c3ba7 & 5025c02d \\
\hline
39 & 5025c02d &  &  &  &  & \(09 e 04214\) & 59c58239 \\
\hline
40 & 59c58239 & c5823959 & a61312cb & 10000000 & b61312cb & 68007 bac & de136967 \\
\hline
41 & de136967 &  &  &  &  & b2df3316 & 6ccc5a71 \\
\hline
42 & 6ccc5a71 &  &  &  &  & 96e939e4 & fa256395 \\
\hline
43 & fa256395 &  &  &  &  & 6c518d80 & 9674ee15 \\
\hline
44 & 9674 ee15 &  & 90922859 &  &  & c814e204 & 5886ca5d \\
\hline
45 & 5886ca5d &  &  &  &  & 76a9fb8a & 2e2f31d7 \\
\hline
46 & 2e2f31d7 &  &  &  &  & 5025c02d & 7e0af1fa \\
\hline
47 & 7e0af1fa &  &  &  &  & 59c58239 & 27cf73c3 \\
\hline
48 & 27cf73c3 & cf73c327 & 8a8f2ecc & 20000000 & aa8f2ecc & de136967 & 749c47ab \\
\hline
49 & 749c47ab &  &  &  &  & 6ccc5a71 & 18501dda \\
\hline
50 & 18501dda &  &  &  &  & fa256395 & e2757e4f \\
\hline
51 & e2757e4f &  &  &  &  & 9674 ee15 & 7401905a \\
\hline
52 & \(7401905 a\) &  & 927c60be &  &  & 5886ca5d & cafaaae3 \\
\hline
53 & cafaaae3 &  &  &  &  & 2e2f31d7 & e4d59b34 \\
\hline
54 & e4d59b34 &  &  &  &  & 7e0af1fa & 9adf6ace \\
\hline
55 & 9adf6ace &  &  &  &  & 27cf73c3 & bd10190d \\
\hline
56 & bd10190d & 10190 dbd & cad4d77a & 40000000 & 8ad4d77a & 749c47ab & fe4890d1 \\
\hline
57 & fe4890d1 &  &  &  &  & 18501 dda & e6188d0b \\
\hline
58 & e6188d0b &  &  &  &  & e2757e4f & 046df344 \\
\hline
59 & 046df344 &  &  &  &  & 7401905a & 706c631e \\
\hline
\end{tabular}
\end{center}

\section*{Appendix B - Cipher Example}
The following diagram shows the values in the state array as the cipher progresses for a block length and a key length of 16 bytes each (i.e., \(N b=4\) and \(N k=4\) ).

\[
\begin{array}{lllllllllllllllll}
\text { Input } & =32 & 43 & \mathrm{f} 6 & \mathrm{a} 8 & 88 & 5 \mathrm{a} & 30 & 31 & 31 & 98 & \text { a2 } & 0 & 37 & 07 & 34 \\
\text { Key } & =2 b & 7 e & 15 & 16 & 28 & \text { ae } & \mathrm{d} 2 & \mathrm{a} 6 & \mathrm{ab} & \mathrm{f} 7 & 15 & 88 & 09 & \mathrm{cf} & 4 \mathrm{f} & 3 \mathrm{c}
\end{array}
\]

The Round Key values are taken from the Key Expansion example in Appendix A.1.

\begin{center}
\begin{tabular}{cccccc}
Round & Start of & After & After & After & Round Key \\
Number & Round & SubBytes & ShiftRows & MixColumns & Value \\
\end{tabular}
\end{center}

input

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
32 & 88 & 31 & \(e 0\) \\
\hline
43 & 5 a & 31 & 37 \\
\hline
f 6 & 30 & 98 & 07 \\
\hline
a 8 & 8 d & a 2 & 34 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(2 b\) & 28 & ab & 09 \\
\hline
7 e & ae & f 7 & cf \\
\hline
15 & d 2 & 15 & 4 f \\
\hline
16 & a 6 & 88 & 3 c \\
\hline
\end{tabular}
\end{center}

1

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|}
\hline
19 & a 0 & 9 a & e 9 &  &  &  \\
\hline
3 d & f 4 & c 6 & f 8 &  &  &  \\
\hline
e 3 & e 2 & 8 d & 48 &  &  &  \\
\hline
be & 2 b & 2 a & 08 & e 0 & b 8 & 1 e \\
\hline
27 & bf & b 4 & 41 &  &  &  \\
\hline
11 & 98 & 5 d & 52 &  &  &  \\
\hline
ae & f 1 & e 5 & 30 &  &  &  \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(d 4\) & \(e 0\) & \(b 8\) & \(1 e\) \\
\hline
\(b f\) & \(b 4\) & 41 & 27 \\
\hline
\(5 d\) & 52 & 11 & 98 \\
\hline
30 & \(a e\) & \(f 1\) & \(e 5\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
04 & \(e 0\) & 48 & 28 \\
\hline
66 & \(c b\) & \(f 8\) & 06 \\
\hline
81 & 19 & \(d 3\) & 26 \\
\hline
\(e 5\) & \(9 a\) & \(7 a\) & \(4 c\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(a 0\) & 88 & 23 & \(2 a\) \\
\hline
fa & 54 & \(a 3\) & \(6 c\) \\
\hline
fe & \(2 c\) & 39 & 76 \\
\hline
17 & \(b 1\) & 39 & 05 \\
\hline
\end{tabular}
\end{center}

2

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
a 4 & 68 & 6 b & 02 \\
\hline
9 c & 9 f & 5 b & 6 a \\
\hline
7 f & 35 & ea & 50 \\
\hline
f 2 & 2 b & 43 & 49 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
49 & 45 & \(7 f\) & 77 \\
\hline
de & db & 39 & 02 \\
\hline
d 2 & 96 & 87 & 53 \\
\hline
89 & f 1 & 1 a & 3 b \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
49 & 45 & 7 f & 77 \\
\hline
db & 39 & 02 & de \\
\hline
87 & 53 & d 2 & 96 \\
\hline
3 b & 89 & f 1 & 1 a \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
58 & 1 b & db & 1 b \\
\hline
4 d & 4 b & e 7 & 6 b \\
\hline
ca & 5 a & ca & b 0 \\
\hline
f 1 & ac & a 8 & e 5 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
f 2 & \(7 a\) & 59 & 73 \\
\hline
c 2 & 96 & 35 & 59 \\
\hline
95 & \(\mathrm{b9}\) & 80 & \(\mathrm{f6}\) \\
\hline
f 2 & 43 & \(7 a\) & 7 f \\
\hline
\end{tabular}
\end{center}

3

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(a a\) & 61 & 82 & 68 \\
\hline
\(8 f\) & \(d d\) & \(d 2\) & 32 \\
\hline
\(5 f\) & \(e 3\) & \(4 a\) & 46 \\
\hline
03 & \(e f\) & \(d 2\) & \(9 a\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(a c\) & \(e f\) & 13 & 45 \\
\hline
73 & \(c 1\) & \(b 5\) & 23 \\
\hline
\(c f\) & 11 & \(d 6\) & \(5 a\) \\
\hline
\(7 b\) & \(d f\) & \(b 5\) & \(b 8\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(a c\) & \(e f\) & 13 & 45 \\
\hline
c 1 & b 5 & 23 & 73 \\
\hline
d 6 & 5 a & cf & 11 \\
\hline
b 8 & 7 b & df & \(\mathrm{b5}\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
75 & 20 & 53 & \(b b\) \\
\hline
\(e c\) & \(0 b\) & \(c 0\) & 25 \\
\hline
09 & 63 & \(c f\) & \(d 0\) \\
\hline
93 & 33 & \(7 c\) & \(d c\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(3 d\) & 47 & \(1 e\) & \(6 d\) \\
\hline
80 & 16 & 23 & \(7 a\) \\
\hline
47 & \(f e\) & \(7 e\) & 88 \\
\hline
\(7 d\) & \(3 e\) & 44 & \(3 b\) \\
\hline
\end{tabular}
\end{center}

4

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
48 & 67 & \(4 d\) & \(d 6\) \\
\hline
\(6 c\) & \(1 d\) & \(e 3\) & \(5 f\) \\
\hline
\(4 e\) & \(9 d\) & \(b 1\) & 58 \\
\hline
\(e e\) & \(0 d\) & 38 & \(e 7\) \\
\hline
52 & 85 & \(e 3\) & \(f 6\) \\
\hline
50 & \(a 4\) & 11 & \(c f\) \\
\hline
\(2 f\) & \(5 e\) & \(c 8\) & \(6 a\) \\
\hline
28 & \(d 7\) & 07 & 94 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
52 & 85 & \(e 3\) & \(f 6\) \\
\hline
\(a 4\) & 11 & \(c f\) & 50 \\
\hline
\(c 8\) & \(6 a\) & \(2 f\) & \(5 e\) \\
\hline
94 & 28 & \(d 7\) & 07 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(0 f\) & 60 & \(6 f\) & \(5 e\) \\
\hline
\(d 6\) & 31 & \(c 0\) & \(b 3\) \\
\hline
\(d a\) & 38 & 10 & 13 \\
\hline
a9 & \(b f\) & \(6 b\) & 01 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
ef & a8 & b 6 & db \\
\hline
44 & 52 & 71 & 0 b \\
\hline
a 5 & 5 b & 25 & ad \\
\hline
41 & 7 f & 3 b & 00 \\
\hline
\end{tabular}
\end{center}

5

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
e0 & c8 & d9 & 85 & e1 & e8 & 35 & 97 & e1 & e8 & 35 & 97 \\
\hline
92 & 63 & b1 & b8 & 4f & fb & c8 & 6c & fb & c8 & 6c & 4f \\
\hline
\(7 f\) & 63 & 35 & be & d2 & fb & 96 & ae & 96 & ae & d2 & fb \\
\hline
e8 & c0 & 50 & 01 & 9b & ba & 53 & 7 c & 7 c & 9b & ba & 53 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
25 & \(b d\) & \(b 6\) & \(4 c\) \\
\hline
\(d 1\) & 11 & \(3 a\) & \(4 c\) \\
\hline
\(a 9\) & \(d 1\) & 33 & \(c 0\) \\
\hline
\(a d\) & 68 & \(8 e\) & \(b 0\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
d 4 & 7 c & ca & 11 \\
\hline
d 1 & 83 & f 2 & \(\mathrm{f9}\) \\
\hline
c 6 & 9 d & b 8 & 15 \\
\hline
f 8 & 87 & bc & bc \\
\hline
\end{tabular}
\end{center}

6

\begin{center}
\begin{tabular}{|c|c|c|c|c|c|c|c|c|c|c|c|}
\hline
f1 & c1 & 7c & 5d & a1 & 78 & 10 & 4c & a1 & 78 & 10 & 4c \\
\hline
00 & 92 & c8 & b5 & 63 & 4f & e8 & d5 & 4f & e8 & d5 & 63 \\
\hline
6f & 4 C & 8b & d5 & a8 & 29 & 3d & 03 & 3d & 03 & a8 & 29 \\
\hline
55 & ef & 32 & 0 c & fc & df & 23 & fe & fe & fc & df & 23 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(4 b\) & \(2 c\) & 33 & 37 \\
\hline
86 & \(4 a\) & \(9 d\) & \(d 2\) \\
\hline
\(8 d\) & 89 & \(f 4\) & 18 \\
\hline
\(6 d\) & 80 & \(e 8\) & \(d 8\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(6 d\) & 11 & \(d b\) & \(c a\) \\
\hline
88 & \(0 b\) & \(f 9\) & 00 \\
\hline
\(a 3\) & \(3 e\) & 86 & 93 \\
\hline
\(7 a\) & \(f d\) & 41 & \(f d\) \\
\hline
\end{tabular}
\end{center}

7

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
26 & \(3 d\) & \(e 8\) & \(f d\) \\
\hline
\(0 e\) & 41 & 64 & \(d 2\) \\
\hline
\(2 e\) & \(b 7\) & 72 & \(8 b\) \\
\hline
17 & \(7 d\) & \(a 9\) & 25 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
f 7 & 27 & \(9 b\) & 54 \\
\hline
\(a b\) & 83 & 43 & \(b 5\) \\
\hline
31 & \(a 9\) & 40 & \(3 d\) \\
\hline
\(f 0\) & \(f f\) & \(d 3\) & \(3 f\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
f 7 & 27 & \(9 b\) & 54 \\
\hline
83 & 43 & \(b 5\) & \(a b\) \\
\hline
40 & \(3 d\) & 31 & \(a 9\) \\
\hline
\(3 f\) & \(f 0\) & \(f f\) & \(d 3\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
14 & 46 & 27 & 34 \\
\hline
15 & 16 & 46 & \(2 a\) \\
\hline
b5 & 15 & 56 & \(d 8\) \\
\hline
bf & \(e c\) & \(d 7\) & 43 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(4 e\) & \(5 f\) & 84 & \(4 e\) \\
\hline
54 & \(5 f\) & \(a 6\) & \(a 6\) \\
\hline
f 7 & \(c 9\) & \(4 f\) & \(d c\) \\
\hline
\(0 e\) & \(f 3\) & \(b 2\) & \(4 f\) \\
\hline
\end{tabular}
\end{center}

8

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
5 a & 19 & a 3 & 7 a \\
\hline
41 & 49 & e 0 & 8 c \\
\hline
42 & dc & 19 & 04 \\
\hline
b 1 & 1 f & 65 & 0 c \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
be & \(d 4\) & \(0 a\) & \(d a\) \\
\hline
83 & \(3 b\) & \(e 1\) & 64 \\
\hline
\(2 c\) & 86 & \(d 4\) & \(f 2\) \\
\hline
\(c 8\) & \(c 0\) & \(4 d\) & \(f e\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
be & \(d 4\) & \(0 a\) & \(d a\) \\
\hline
\(3 b\) & \(e 1\) & 64 & 83 \\
\hline
\(d 4\) & \(f 2\) & \(2 c\) & 86 \\
\hline
fe & \(c 8\) & \(c 0\) & \(4 d\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
00 & b 1 & 54 & fa \\
\hline
51 & c 8 & 76 & 1 b \\
\hline
2 f & 89 & 6 d & 99 \\
\hline
d 1 & ff & cd & ea \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
ea & \(b 5\) & 31 & \(7 f\) \\
\hline
\(d 2\) & \(8 d\) & \(2 b\) & \(8 d\) \\
\hline
73 & \(b a\) & \(f 5\) & 29 \\
\hline
21 & \(d 2\) & 60 & \(2 f\) \\
\hline
\end{tabular}
\end{center}

9

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
ea & 04 & 65 & 85 \\
\hline
83 & 45 & \(5 d\) & 96 \\
\hline
\(5 c\) & 33 & 98 & \(b 0\) \\
\hline
f0 & \(2 d\) & \(a d\) & \(c 5\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
87 & \(f 2\) & \(4 d\) & 97 \\
\hline
\(e c\) & \(6 e\) & \(4 c\) & 90 \\
\hline
\(4 a\) & \(c 3\) & 46 & \(e 7\) \\
\hline
\(8 c\) & \(d 8\) & 95 & \(a 6\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
87 & \(f 2\) & \(4 d\) & 97 \\
\hline
\(6 e\) & \(4 c\) & 90 & \(e c\) \\
\hline
46 & \(e 7\) & \(4 a\) & \(c 3\) \\
\hline
\(a 6\) & \(8 c\) & \(d 8\) & 95 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
47 & 40 & \(a 3\) & \(4 c\) \\
\hline
37 & \(d 4\) & 70 & \(9 f\) \\
\hline
94 & \(e 4\) & \(3 a\) & 42 \\
\hline
\(e d\) & \(a 5\) & \(a 6\) & \(b c\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
ac & 19 & 28 & 57 \\
\hline
77 & fa & d 1 & 5 c \\
\hline
66 & dc & 29 & 00 \\
\hline
f 3 & 21 & 41 & 6 e \\
\hline
\end{tabular}
\end{center}

10

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
eb & 59 & 8 b & 1 b \\
\hline
40 & 2 e & a 1 & c 3 \\
\hline
f 2 & 38 & 13 & 42 \\
\hline
1 e & 84 & e 7 & d 2 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(e 9\) & \(c b\) & \(3 d\) & \(a f\) \\
\hline
09 & 31 & 32 & \(2 e\) \\
\hline
89 & 07 & \(7 d\) & \(2 c\) \\
\hline
72 & \(5 f\) & 94 & \(b 5\) \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
e9 & cb & \(3 d\) & \(a f\) \\
\hline
31 & 32 & \(2 e\) & 09 \\
\hline
\(7 d\) & \(2 c\) & 89 & 07 \\
\hline
\(b 5\) & 72 & \(5 f\) & 94 \\
\hline
\end{tabular}
\end{center}

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
\(d 0\) & \(c 9\) & e1 & \(b 6\) \\
\hline
14 & \(e e\) & \(3 f\) & 63 \\
\hline
f9 & 25 & \(0 c\) & \(0 c\) \\
\hline
a8 & 89 & c8 & a6 \\
\hline
\end{tabular}
\end{center}

output

\begin{center}
\begin{tabular}{|c|c|c|c|}
\hline
39 & 02 & dc & 19 \\
\hline
25 & dc & 11 & 6 a \\
\hline
84 & 09 & 85 & 0 b \\
\hline
1 d & fb & 97 & 32 \\
\hline
\end{tabular}
\end{center}

\section*{Appendix C - Example Vectors}
The NIST Computer Security Resource Center provides a website with "examples with intermediate values" for AES [8].

\section*{Appendix D - Change Log (Informative)}
The original FIPS 197 (November 26, 2001) was reviewed and updated under the auspices of NIST's Crypto Publication Review Board [9]. Public comments and analyses of the security of the AES that are described in NIST IR 8319 [10] were the basis for the decision to maintain the technical specifications of the Standard.

The following is a summary of the editorial changes to the original FIPS 197 in the May 9, 2023 update, NIST FIPS 197-upd1:

\begin{enumerate}
  \item The formatting of many elements of the publication was improved, and the text was revised for clarity.
  \item The following items were added to the front matter: title page, foreword, abstract, and keywords. Officials' names and affiliations on the title page reflect the original publication.
  \item The announcement sections were updated to reflect current statutes, regulations, standards, guidelines, and validation programs.
  \item Section 1 was revised to 1) add and update references to the AES development effort and 2) explicitly name AES-128, AES-192, and AES-256.
  \item The material in the previous Section 2.2 (Algorithm Parameters, Symbols and Functions) was split into two new sections: 2.2 (List of Functions) and 2.3 (Algorithm Parameters and Symbols).
  \item The terms, functions, and symbols from the specifications are comprehensively included in the lists in Sections 2.1-2.3.
  \item The description of the indexing convention was removed from Section 3.1.
  \item Table 1 was revised, and the text in the previous Section 3.2 on the polynomial interpretation of bytes was revised and moved to Section 4.
  \item A general definition of the indexing of byte sequences was added to Section 3.3 before specializing to the example of a block, and Table 2 was revised.
  \item The heading for Section 3.5 was changed to focus on word arrays, and notation for them was included in the text. The column words of the state were presented in a vertical format, with an improved description of the indices.
  \item A reference for additional information on finite fields [4] was included in a footnote within Section 4, and the headings for Sections 4.1 and 4.2 were revised to explicitly mention \(\mathrm{GF}\left(2^{8}\right)\).
  \item Section 4.2 was revised to provide an explicit, general description of finite field multiplication. The previous Section 4.2 .1 was incorporated into the revised Section 4.2 by replacing the original example of modular polynomial reduction with an illustration of finite field multiplication using xtime.
  \item The heading of Section 4.3 was revised to focus on multiplication by a fixed matrix, and the text of the section was simplified by removing the secondary interpretation as polynomial\\
reduction. The descriptions of MixColumns() and InvMixColumnS() in Sections 5.1.3 and 5.3.3 were revised accordingly, to refer back to this construction.
  \item The text on multiplicative inverses in \(\mathrm{GF}\left(2^{8}\right)\) from the previous Section 4.2 was revised and moved to the new Section 4.4.
  \item The discussion of the algorithm specifications in Section 5 was expanded to elaborate on the relationships among its components. A new brief explanation of \(N b\) as a Rijndael parameter enabled the replacement of \(N b\) with its constant value 4 in the rest of the Standard.
  \item The pseudocode for the cipher, the key expansion routine, and the inverse cipher in Sections 5.1, 5.2, and 5.3 was reformatted, and some of the text in these sections was revised for clarity.
  \item The descriptions of ShiftRows() in Section 5.1.2 and InvShiftRows() in Section 5.3.2 were improved, and a mistake in the latter was corrected.
  \item Illustrations of the three instances of KeyExpansion() in the new Figs. 6, 7, and 8 were added to Section 5.2. The text in the section was also revised, including an explicit display of the round constants in the new Fig. 5.
  \item A separate algorithm for the modified key expansion routine for the equivalent inverse cipher was added to Section 5.3.5 instead of only the supplementary lines. The description of the equivalent inverse cipher was simplified in favor of the citation of an updated reference [3].
  \item Section 6.2 was revised to include a reference to NIST Special Publication 800-133, Rev. 2 [6].
  \item Section 6.4 was revised to expand the discussion of implementation attacks.
  \item The References section is no longer labeled as an appendix. The references were updated to replace withdrawn publications and correct citation information and URLs.
  \item The examples in Appendix C were removed in favor of a reference to the detailed example vectors that are now maintained at [8].
  \item Appendix D was created to summarize the changes in this update to FIPS 197.
\end{enumerate}


\end{document}