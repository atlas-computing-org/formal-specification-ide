You are an expert in semantic decomposition of technical standards which are written in natural language. You will be provided with three inputs: LHS TEXT, RHS TEXT and EXISTING ANNOTATIONS. Please ignore the last two inputs and focus only on the LHS TEXT. This text will be written in LaTeX format. We want to decompose the text into segments where each segment is labelled with one of the following semantic categories:

- Boilerplate: LaTeX preamble code that does not otherwise have any semantic content
- Intent: motivation for how a concept is defined or designed
- Definitions: the one place in the text where a concept is defined technically
- Elaborations: superfluous description of an existing definition or algorithm
- Assumptions: what is assumed about the inputs, terms or use case of an algorithm or definition
- Requirements: what is required about the outputs, terms, or behaviors of an algorithm or definition
- Preferences: not strictly necessary assumptions or requirements
- Algorithms: formal descriptions of a function, could refer to pseuodocode in the text.
- Examples: specialization of a definition or application of an algorithm to some data

Here, "Algorithms" can refer to pseudocode in the text.

Your job is to:
1. Identify semantically contiguous segment in the LHS TEXT.
2. Provide a description that summarizes the common theme of each segment.
3. Provide the best label for each segment

Example of the input texts:
```
### LHS TEXT

\subsection*{6.1 SHA-1}
SHA-1 may be used to hash a message, \(M\), having a length of \(\ell\) bits, where \(0 \leq \ell<2^{64}\). The algorithm uses 1) a message schedule of eighty 32 -bit words, 2) five working variables of 32 bits each, and 3) a hash value of five 32-bit words. The final result of SHA-1 is a 160 -bit message digest.

The words of the message schedule are labeled \(W_{0}, W_{1}, \ldots, W_{79}\). The five working variables are labeled \(\boldsymbol{a}, \boldsymbol{b}, \boldsymbol{c}, \boldsymbol{d}\), and \(\boldsymbol{e}\). The words of the hash value are labeled \(H_{0}^{(i)}, H_{1}^{(i)}, \ldots, H_{4}^{(i)}\), which will hold the initial hash value, \(H^{(0)}\), replaced by each successive intermediate hash value (after each message block is processed), \(H^{(i)}\), and ending with the final hash value, \(H^{(N)}\). SHA-1 also uses a single temporary word, \(T\).

\subsection*{6.1.1 SHA-1 Preprocessing}
\begin{enumerate}
\item Set the initial hash value, \(H^{(0)}\), as specified in Sec. 5.3.1.
\item The message is padded and parsed as specified in Section 5.
\end{enumerate}

\subsection*{6.1.2 SHA-1 Hash Computation}
The SHA-1 hash computation uses functions and constants previously defined in Sec. 4.1.1 and Sec. 4.2.1, respectively. Addition (+) is performed modulo \(2^{32}\).

Each message block, \(M^{(1)}, M^{(2)}, \ldots, M^{(N)}\), is processed in order, using the following steps:

For \(i=1\) to \(N\) :\\
\{

\begin{enumerate}
\item Prepare the message schedule, \(\left\{W_{t}\right\}\) :
\end{enumerate}

\[
W_{t}= \begin{cases}M_{t}^{(i)} & 0 \leq t \leq 15 \\ R O T L^{1}\left(W_{t-3} \oplus W_{t-8} \oplus W_{t-14} \oplus W_{t-16}\right) & 16 \leq t \leq 79\end{cases}
\]

\begin{enumerate}
\setcounter{enumi}{1}
\item Initialize the five working variables, \(\boldsymbol{a}, \boldsymbol{b}, \boldsymbol{c}, \boldsymbol{d}\), and \(\boldsymbol{e}\), with the \((i-1)^{\text {st }}\) hash value:
\end{enumerate}

\[
\begin{aligned}
& a=H_{0}^{(i-1)} \\
& b=H_{1}^{(i-1)} \\
& c=H_{2}^{(i-1)} \\
& d=H_{3}^{(i-1)} \\
& e=H_{4}^{(i-1)}
\end{aligned}
\]

\begin{enumerate}
\setcounter{enumi}{2}
\item For \(t=0\) to 79 :\\
\{
\end{enumerate}

\[
\begin{aligned}
& T=R O T L^{5}(a)+f_{t}(b, c, d)+e+K_{t}+W_{t} \\
& e=d \\
& d=c \\
& c=R O T L^{30}(b) \\
& b=a \\
& a=T
\end{aligned}
\]

\}\\
4. Compute the \(i^{\text {th }}\) intermediate hash value \(H^{(i)}\) :

\[
\begin{aligned}
& H_{0}^{(i)}=a+H_{0}^{(i-1)} \\
& H_{1}^{(i)}=b+H_{1}^{(i-1)} \\
& H_{2}^{(i)}=c+H_{2}^{(i-1)} \\
& H_{3}^{(i)}=d+H_{3}^{(i-1)} \\
& H_{4}^{(i)}=e+H_{4}^{(i-1)}
\end{aligned}
\]

After repeating steps one through four a total of \(N\) times (i.e., after processing \(M^{(N)}\) ), the resulting 160-bit message digest of the message, \(M\), is

\[
H_{0}^{(N)}\left\|H_{1}^{(N)}\right\| H_{2}^{(N)}\left\|H_{3}^{(N)}\right\| H_{4}^{(N)}
\]

### RHS TEXT

-- SHA1.lean
import Init.Data.ByteArray
import Init.Data.Repr
import Mathlib.Data.UInt
import Mathlib.Data.Vector.Defs
import Init.Data.Nat.Basic
import VerifiedFipsCryptography.Util.HexString

namespace SHA1
open Mathlib

-- Type alias for 32-bit words
abbrev Word := UInt32

-- Initial hash values (H0) as per FIPS 180-4
def initialHash : Mathlib.Vector Word 5 :=
  ⟨[0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0], rfl⟩

-- Constants K for each iteration
def K (t : Nat) : Word :=
  if t ≤ 19 then 0x5A827999
  else if t ≤ 39 then 0x6ED9EBA1
  else if t ≤ 59 then 0x8F1BBCDC
  else 0xCA62C1D6

-- Left rotate operation using mathlib's rotateLeft
def ROTL (n : Nat) (x : Word) : Word :=
  let nn : UInt32 := n.toUInt32
  ((x <<< nn) ||| (x >>> (32 - nn)))

-- Padding function
def padMessage (msg : ByteArray) : ByteArray :=
  let ml := UInt64.ofNat (msg.size * 8) -- Message length in bits
  let padding : ByteArray := ByteArray.mk #[0x80] -- Append '1' bit and seven '0' bits
  let zeroPaddingLength := (56 - ((msg.size + 1) % 64)) % 64
  let zeroPadding := ByteArray.mk (List.replicate zeroPaddingLength 0).toArray
  let lengthBytes := ByteArray.mk $ ((List.range 8).reverse.map fun (i: Nat) =>
    ((ml >>> (i * 8).toUInt64) &&& 0xFF).toUInt8).toArray
  msg ++ padding ++ zeroPadding ++ lengthBytes

-- Break message into 512-bit (64-byte) chunks
def chunkify (msg : ByteArray) : Array ByteArray :=
  let chunkSize := 64
  let numChunks := (msg.size + chunkSize - 1) / chunkSize
  let chunks := List.range numChunks |>.map
    fun i => msg.extract (i * chunkSize) ((i + 1) * chunkSize)
  chunks.toArray

-- Convert a 4-byte slice to a Word (UInt32)
def bytesToWord (bytes : ByteArray) : Word :=
  bytes.foldl (fun acc b => (acc <<< 8) ||| b.toUInt32) 0

-- Main hash function
def hash (message : ByteArray) : ByteArray :=
  let paddedMsg := padMessage message
  let chunks := chunkify paddedMsg
  let H := initialHash

  let finalHash := chunks.foldl (init := H) fun h0 chunk =>
    -- Prepare the message schedule W
    let words := List.range 16 |>.map fun i =>
      let bytes := chunk.extract (i * 4) ((i + 1) * 4)
      bytesToWord bytes
    let W := Id.run do
      let mut W := words
      for t in [16:80] do
        let wt := ROTL 1 (W[t - 3]! ^^^ W[t - 8]! ^^^ W[t - 14]! ^^^ W[t - 16]!)
        W := W.append [wt]
      W
    Id.run do
    -- Initialize working variables
    let mut a := h0[0]!
    let mut b := h0[1]!
    let mut c := h0[2]!
    let mut d := h0[3]!
    let mut e := h0[4]!
    -- Main loop
    for t in [0:80] do
      let f :=
        if t ≤ 19 then (b &&& c) ||| ((~~~b) &&& d)
        else if t ≤ 39 then b ^^^ c ^^^ d
        else if t ≤ 59 then (b &&& c) ||| (b &&& d) ||| (c &&& d)
        else b ^^^ c ^^^ d
      let temp := (ROTL 5 a) + f + e + K t + W[t]!
      e := d
      d := c
      c := ROTL 40 b
      b := a
      a := temp
    -- Compute the new hash values
    return ⟨h0.toList.zipWith (· + ·) [a, b, c, d, e], by simp⟩

  -- Concatenate the final hash values into a ByteArray
  let resultBytes := finalHash.toList.foldl (init := ByteArray.empty) fun acc (h: Word) =>
    let tmp := (List.range 4).toArray.reverse.map
      (fun (i: Nat) => ((h >>> (i.toUInt32 * 8)) &&& 0xFF).toUInt8)
      |> ByteArray.mk
    acc ++ tmp
  resultBytes

end SHA1

### EXISTING ANNOTATIONS

[{
  description: "Preprocessing",
  lhsText: ["\subsection*{6.1.1 SHA-1 Preprocessing}",
"\item Set the initial hash value, \(H^{(0)}\), as specified in Sec. 5.3.1.",
"\item The message is padded and parsed as specified in Section 5."],
  rhsText: ["-- Initial hash values (H0) as per FIPS 180-4
def initialHash : Mathlib.Vector Word 5 :=",
  "-- Padding function
def padMessage (msg : ByteArray) : ByteArray :="],
  status: "default",
}]
```

Now, based on these instructions, please generate a JSON object with annotations. Each annotation should include:
- A short description for the common themem of each mapping.
- A semantically-contiguous segment of the LHS TEXT. There can be more than one line or paragraph for each segment. Provide just the first sentence and the last sentence of the segment. Each sentence needs to be an exact substring of the LHS TEXT. Please take extra care to make substrings exact, including whitespace and escape characters.
- The best label for the segment: "Boilerplate", "Intent", "Definitions", "Elaborations", "Assumptions", "Requirements", "Preferences", "Algorithms", "Examples".

The JSON output format should be a list of objects. Each object has four fields: a text field "description", a text list field "lhsText", and a text field "label". The label field value must be one of "Boilerplate", "Intent", "Definitions", "Elaborations", "Assumptions", "Requirements", "Preferences", "Algorithms" or "Examples".

Please organize your output into the three sections shown below, each of which begins with "### <SECTION NAME>". The second section, JSON ANNOTATIONS, should contain the JSON output in a code formatting block and nothing else.

Here's an example output, but with the descriptions, sentences and labels removed.

### CHAIN-OF-THOUGHT ANALYSIS

I'll analyze the LHS TEXT and label each semantically-contiguous segment.

### JSON ANNOTATIONS

```json
[{
  description: " ... ",
  lhsText: {
    first: " ... ",
    last: " ... ",
  },
  label: " ... ",
}, {
  description: " ... ",
  lhsText: {
    first: " ... ",
    last: " ... ",
  },
  label: " ... ",
}]
```

### NOTES AND CONCERNS

This was a simple example, so there are no concerns.
